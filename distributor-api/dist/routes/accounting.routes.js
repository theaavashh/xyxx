"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_middleware_1 = require("../middleware/auth.middleware");
const accounting_controller_1 = require("../controllers/accounting.controller");
const router = (0, express_1.Router)();
router.use(auth_middleware_1.authenticateToken);
router.get('/journal-entries', accounting_controller_1.journalEntryController.getJournalEntries);
router.get('/journal-entries/:id', accounting_controller_1.journalEntryController.getJournalEntryById);
router.post('/journal-entries', accounting_controller_1.journalEntryController.createJournalEntry);
router.put('/journal-entries/:id', accounting_controller_1.journalEntryController.updateJournalEntry);
router.patch('/journal-entries/:id/post', accounting_controller_1.journalEntryController.postJournalEntry);
router.delete('/journal-entries/:id', accounting_controller_1.journalEntryController.deleteJournalEntry);
router.post('/journal-entries/validate', accounting_controller_1.journalEntryController.validateJournalEntry);
router.get('/ledger', accounting_controller_1.ledgerController.getLedgerEntries);
router.get('/ledger/account/:accountCode', accounting_controller_1.ledgerController.getAccountLedger);
router.get('/ledger/account/:accountCode/balance', accounting_controller_1.ledgerController.getAccountBalance);
router.get('/accounts', accounting_controller_1.accountsController.getAccounts);
router.get('/accounts/chart', accounting_controller_1.accountsController.getChartOfAccounts);
router.get('/accounts/:id', accounting_controller_1.accountsController.getAccountById);
router.post('/accounts', accounting_controller_1.accountsController.createAccount);
router.put('/accounts/:id', accounting_controller_1.accountsController.updateAccount);
router.delete('/accounts/:id', accounting_controller_1.accountsController.deleteAccount);
router.get('/party-ledger', accounting_controller_1.partyLedgerController.getPartyLedgers);
router.get('/party-ledger/:id', accounting_controller_1.partyLedgerController.getPartyLedgerById);
router.get('/party-ledger/:id/transactions', accounting_controller_1.partyLedgerController.getPartyTransactions);
router.post('/party-ledger', accounting_controller_1.partyLedgerController.createParty);
router.put('/party-ledger/:id', accounting_controller_1.partyLedgerController.updateParty);
router.delete('/party-ledger/:id', accounting_controller_1.partyLedgerController.deleteParty);
router.get('/purchase-entries', accounting_controller_1.purchaseEntryController.getPurchaseEntries);
router.get('/purchase-entries/:id', accounting_controller_1.purchaseEntryController.getPurchaseEntryById);
router.post('/purchase-entries', accounting_controller_1.purchaseEntryController.createPurchaseEntry);
router.put('/purchase-entries/:id', accounting_controller_1.purchaseEntryController.updatePurchaseEntry);
router.patch('/purchase-entries/:id/mark-paid', accounting_controller_1.purchaseEntryController.markAsPaid);
router.delete('/purchase-entries/:id', accounting_controller_1.purchaseEntryController.deletePurchaseEntry);
router.get('/vat-reports', accounting_controller_1.vatReportController.getVATReports);
router.get('/vat-reports/:id', accounting_controller_1.vatReportController.getVATReportById);
router.post('/vat-reports/generate', accounting_controller_1.vatReportController.generateVATReport);
router.patch('/vat-reports/:id/file', accounting_controller_1.vatReportController.fileVATReport);
router.delete('/vat-reports/:id', accounting_controller_1.vatReportController.deleteVATReport);
router.get('/trial-balance', accounting_controller_1.trialBalanceController.generateTrialBalance);
router.get('/trial-balance/history', accounting_controller_1.trialBalanceController.getTrialBalanceHistory);
router.get('/balance-sheet', accounting_controller_1.balanceSheetController.generateBalanceSheet);
router.get('/balance-sheet/history', accounting_controller_1.balanceSheetController.getBalanceSheetHistory);
router.get('/balance-sheet/ratios', accounting_controller_1.balanceSheetController.getFinancialRatios);
router.get('/debtors-creditors', accounting_controller_1.debtorsCreditors.getDebtorsCreditors);
router.get('/debtors-creditors/aging', accounting_controller_1.debtorsCreditors.getAgingAnalysis);
router.get('/purchase-sales-reports', accounting_controller_1.purchaseSalesReportsController.getReports);
router.post('/purchase-sales-reports/generate', accounting_controller_1.purchaseSalesReportsController.generateReport);
router.get('/mis-reports', accounting_controller_1.misReportController.getMISReports);
router.post('/mis-reports/generate', accounting_controller_1.misReportController.generateMISReport);
router.get('/mis-reports/kpis', accounting_controller_1.misReportController.getDashboardKPIs);
exports.default = router;
//# sourceMappingURL=accounting.routes.js.map