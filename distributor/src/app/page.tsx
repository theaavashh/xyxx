'use client';

import { useState, useEffect, createContext, useContext, ReactNode, useRef } from 'react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import Image from 'next/image';
import toast, { Toaster } from 'react-hot-toast';
import NavigationTabs from '@/components/NavigationTabs';

// Nepali date conversion function
const convertToNepaliDate = (englishDate: Date): string => {
  const nepaliMonths = [
    '‡§¨‡•à‡§∂‡§æ‡§ñ', '‡§ú‡•á‡§∑‡•ç‡§†', '‡§Ü‡§∑‡§æ‡§¢‡§º', '‡§∂‡•ç‡§∞‡§æ‡§µ‡§£', '‡§≠‡§æ‡§¶‡•ç‡§∞', '‡§Ü‡§∂‡•ç‡§µ‡§ø‡§®',
    '‡§ï‡§æ‡§∞‡•ç‡§§‡§ø‡§ï', '‡§Æ‡§æ‡§∞‡•ç‡§ó', '‡§™‡•å‡§∑', '‡§Æ‡§æ‡§ò', '‡§´‡§æ‡§≤‡•ç‡§ó‡•Å‡§®', '‡§ö‡•à‡§§‡•ç‡§∞'
  ];
  
  const nepaliDays = [
    '‡§Ü‡§á‡§§‡§¨‡§æ‡§∞', '‡§∏‡•ã‡§Æ‡§¨‡§æ‡§∞', '‡§Æ‡§Ç‡§ó‡§≤‡§¨‡§æ‡§∞', '‡§¨‡•Å‡§ß‡§¨‡§æ‡§∞', '‡§¨‡§ø‡§π‡§ø‡§¨‡§æ‡§∞', '‡§∂‡•Å‡§ï‡•ç‡§∞‡§¨‡§æ‡§∞', '‡§∂‡§®‡§ø‡§¨‡§æ‡§∞'
  ];
  
  // Fixed conversion: English 2025 = Bikram Sambat 2082
  // The difference is approximately 57 years, but let's be more precise
  const englishYear = englishDate.getFullYear();
  const nepaliYear = englishYear + 57; // 2025 + 57 = 2082
  
  const month = englishDate.getMonth();
  const day = englishDate.getDate();
  const dayOfWeek = englishDate.getDay();
  
  return `${nepaliYear} ${nepaliMonths[month]} ${day}, ${nepaliDays[dayOfWeek]}`;
};

const getTodayNepaliDate = (): string => {
  return convertToNepaliDate(new Date());
};

// ========== CONTEXT API FOR FORM DATA MANAGEMENT ==========

interface FormContextType {
  allFormData: any;
  updateFormData: (stepData: any) => void;
  clearFormData: () => void;
  getCurrentFormData: () => any;
}

const FormDataContext = createContext<FormContextType | undefined>(undefined);

// Form Data Provider Component
export function FormDataProvider({ children }: { children: ReactNode }) {
  const [allFormData, setAllFormData] = useState<any>({});

  const updateFormData = (stepData: any) => {
    console.log('üîÑ CONTEXT: Updating form data with:', stepData);
    setAllFormData(prev => {
      const updated = { ...prev, ...stepData };
      ;
      return updated;
    });
  };

  const clearFormData = () => {
   
    setAllFormData({});
  };

  const getCurrentFormData = () => {
    return allFormData;
  };

  return (
    <FormDataContext.Provider value={{
      allFormData,
      updateFormData,
      clearFormData,
      getCurrentFormData
    }}>
      {children}
    </FormDataContext.Provider>
  );
}

// Custom hook to use form context
export function useFormData() {
  const context = useContext(FormDataContext);
  if (context === undefined) {
    throw new Error('useFormData must be used within a FormDataProvider');
  }
  return context;
}

// ========== FORM VALIDATION SCHEMA ==========
const schema = yup.object().shape({
  // Step 1: Personal Details
  fullName: yup.string()
    .required('‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ')
    .matches(/^[a-zA-Z\s\u0900-\u097F]+$/, '‡§®‡§æ‡§Æ‡§Æ‡§æ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§π‡•Å‡§®‡•Å ‡§π‡•Å‡§Å‡§¶‡•à‡§® (Name should not contain numbers)'),
  age: yup.number()
    .typeError('‡§â‡§Æ‡•á‡§∞ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ (Age should be a number)')
    .required('‡§â‡§Æ‡•á‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ')
    .min(18, '‡§ï‡§Æ‡•ç‡§§‡§ø‡§Æ‡§æ ‡•ß‡•Æ ‡§µ‡§∞‡•ç‡§∑ ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ')
    .max(80, '‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡•Æ‡•¶ ‡§µ‡§∞‡•ç‡§∑ ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ (Maximum age should be 80)')
    .integer('‡§â‡§Æ‡•á‡§∞ ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ (Age must be a whole number)'),
  gender: yup.string().required('‡§≤‡§ø‡§ô‡•ç‡§ó ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ'),
  citizenshipNumber: yup
    .string()
    .required('‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ')
    .matches(/^[0-9\-\/]+$/, '‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞‡§Æ‡§æ ‡§ï‡•á‡§µ‡§≤ ‡§Ö‡§Ç‡§ï, - ‡§∞ / ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ')
    .test('min-digits', '‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞ ‡§ï‡§Æ‡•ç‡§§‡§ø‡§Æ‡§æ ‡•™ ‡§Ö‡§Ç‡§ï‡§ï‡•ã ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ', function(value) {
      if (!value) return false;
      const digitsOnly = value.replace(/[^0-9]/g, '');
      return digitsOnly.length >= 4;
    }),
  issuedDistrict: yup.string().required('‡§ú‡§æ‡§∞‡•Ä ‡§ú‡§ø‡§≤‡•ç‡§≤‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ'),
  mobileNumber: yup
    .string()
    .required('‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Æ‡•ç‡§¨‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ')
    .matches(/^[0-9]+$/, '‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Æ‡•ç‡§¨‡§∞‡§Æ‡§æ ‡§ï‡•á‡§µ‡§≤ ‡§Ö‡§Ç‡§ï‡§π‡§∞‡•Ç ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ')
    .length(10, '‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Æ‡•ç‡§¨‡§∞ ‡§†‡•ç‡§Ø‡§æ‡§ï‡•ç‡§ï‡•à ‡•ß‡•¶ ‡§Ö‡§Ç‡§ï‡§ï‡•ã ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ')
    .matches(/^9/, '‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Æ‡•ç‡§¨‡§∞ ‡•Ø ‡§≤‡•á ‡§∏‡•Å‡§∞‡•Å ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ'),
  email: yup.string().email('‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§á‡§Æ‡•á‡§≤ ‡§ö‡§æ‡§π‡§ø‡§®‡•ç‡§õ').required('‡§á‡§Æ‡•á‡§≤ ‡§†‡•á‡§ó‡§æ‡§®‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ'),
  permanentAddress: yup.string().required('‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§†‡•á‡§ó‡§æ‡§®‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ'),
  temporaryAddress: yup.string(),

  // Step 2: Business Details
  companyName: yup
    .string()
    .required('‡§ï‡§Æ‡•ç‡§™‡§®‡•Ä‡§ï‡•ã ‡§®‡§æ‡§Æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ')
    .matches(/^[a-zA-Z\s\u0900-\u097F]+$/, '‡§ï‡§Æ‡•ç‡§™‡§®‡•Ä‡§ï‡•ã ‡§®‡§æ‡§Æ‡§Æ‡§æ ‡§ï‡•á‡§µ‡§≤ ‡§Ö‡§ï‡•ç‡§∑‡§∞‡§π‡§∞‡•Ç ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ'),
  registrationNumber: yup
    .string()
    .required('‡§¶‡§∞‡•ç‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ')
    .matches(/^[0-9\-\/]+$/, '‡§¶‡§∞‡•ç‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞‡§Æ‡§æ ‡§ï‡•á‡§µ‡§≤ ‡§Ö‡§Ç‡§ï, - ‡§∞ / ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ'),
  panVatNumber: yup
    .string()
    .required('PAN/VAT ‡§®‡§Æ‡•ç‡§¨‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ')
    .matches(/^[0-9\-\/]+$/, 'PAN/VAT ‡§®‡§Æ‡•ç‡§¨‡§∞‡§Æ‡§æ ‡§ï‡•á‡§µ‡§≤ ‡§Ö‡§Ç‡§ï, - ‡§∞ / ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ'),
  officeAddress: yup
    .string()
    .required('‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø‡§ï‡•ã ‡§†‡•á‡§ó‡§æ‡§®‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ')
    .matches(/^[a-zA-Z\u0900-\u097F]/, '‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø‡§ï‡•ã ‡§†‡•á‡§ó‡§æ‡§®‡§æ ‡§Ö‡§ï‡•ç‡§∑‡§∞‡§≤‡•á ‡§∏‡•Å‡§∞‡•Å ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ'),
  workAreaDistrict: yup.string().required('‡§ï‡§æ‡§Æ ‡§ó‡§∞‡•ç‡§®‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞/‡§ú‡§ø‡§≤‡•ç‡§≤‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ'),
  desiredDistributionArea: yup
    .string()
    .required('‡§µ‡§ø‡§§‡§∞‡§ï ‡§¨‡§®‡•ç‡§® ‡§ö‡§æ‡§π‡§®‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ')
    .matches(/^[a-zA-Z\u0900-\u097F]/, '‡§µ‡§ø‡§§‡§∞‡§ï ‡§¨‡§®‡•ç‡§® ‡§ö‡§æ‡§π‡§®‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Ö‡§ï‡•ç‡§∑‡§∞‡§≤‡•á ‡§∏‡•Å‡§∞‡•Å ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ'),
  currentBusiness: yup.array().of(
    yup.object().shape({
      businessType: yup.string().required('‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡§ï‡•ã ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ'),
      products: yup.string().required('‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ'),
      turnover: yup.string().required('‡§ü‡§∞‡•ç‡§®‡§ì‡§≠‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ')
    })
  ), // Dynamic table for multiple business entries
  businessType: yup.string(),

  // Step 3: Staff and Infrastructure
  salesManCount: yup.number(),
  salesManExperience: yup.string(),
  driverCount: yup.number(),
  driverExperience: yup.string(),
  helperCount: yup.number(),
  helperExperience: yup.string(),
  accountantCount: yup.number(),
  accountantExperience: yup.string(),
  storageSpace: yup.number(),
  storageDetails: yup.string(),
  truckCount: yup.number(),
  truckExperience: yup.string(),
  fourWheelerCount: yup.number(),
  fourWheelerExperience: yup.string(),
  motorcycleCount: yup.number(),
  motorcycleExperience: yup.string(),
  cycleCount: yup.number(),
  cycleExperience: yup.string(),
  thelaCount: yup.number(),
  thelaExperience: yup.string(),

  // Step 4: Business Information and Products
  productCategory: yup.string(),
  businessExperience: yup.string(),
  monthlyIncome: yup.string(),
  storageFacility: yup.string(),
  paymentPreference: yup.string(),
  creditDays: yup.number(),
  deliveryPreference: yup.string(),

  // Partnership Details (optional)
  partnerFullName: yup.string(),
  partnerAge: yup
    .number()
    .when('partnerFullName', {
      is: (val: string) => val && val.length > 0,
      then: (schema) => schema
        .typeError('‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§â‡§Æ‡•á‡§∞ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ')
        .required('‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§â‡§Æ‡•á‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ')
        .min(18, '‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§ï‡§Æ‡•ç‡§§‡§ø‡§Æ‡§æ ‡•ß‡•Æ ‡§µ‡§∞‡•ç‡§∑ ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ')
        .max(80, '‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡•Æ‡•¶ ‡§µ‡§∞‡•ç‡§∑ ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ')
        .integer('‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§â‡§Æ‡•á‡§∞ ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ'),
      otherwise: (schema) => schema
    }),
  partnerGender: yup.string(),
  partnerCitizenshipNumber: yup
    .string()
    .when('partnerFullName', {
      is: (val: string) => val && val.length > 0,
      then: (schema) => schema
        .required('‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ')
        .matches(/^[0-9\-\/]+$/, '‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞‡§Æ‡§æ ‡§ï‡•á‡§µ‡§≤ ‡§Ö‡§Ç‡§ï, - ‡§∞ / ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ')
        .test('min-digits', '‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞ ‡§ï‡§Æ‡•ç‡§§‡§ø‡§Æ‡§æ ‡•™ ‡§Ö‡§Ç‡§ï‡§ï‡•ã ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ', function(value) {
          if (!value) return false;
          const digitsOnly = value.replace(/[^0-9]/g, '');
          return digitsOnly.length >= 4;
        }),
      otherwise: (schema) => schema
    }),
  partnerIssuedDistrict: yup.string(),
  partnerMobileNumber: yup
    .string()
    .when('partnerFullName', {
      is: (val: string) => val && val.length > 0,
      then: (schema) => schema
        .required('‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Æ‡•ç‡§¨‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ')
        .matches(/^[0-9]+$/, '‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Æ‡•ç‡§¨‡§∞‡§Æ‡§æ ‡§ï‡•á‡§µ‡§≤ ‡§Ö‡§Ç‡§ï‡§π‡§∞‡•Ç ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ')
        .length(10, '‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Æ‡•ç‡§¨‡§∞ ‡§†‡•ç‡§Ø‡§æ‡§ï‡•ç‡§ï‡•à ‡•ß‡•¶ ‡§Ö‡§Ç‡§ï‡§ï‡•ã ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ')
        .matches(/^9/, '‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Æ‡•ç‡§¨‡§∞ ‡•Ø ‡§≤‡•á ‡§∏‡•Å‡§∞‡•Å ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ'),
      otherwise: (schema) => schema
    }),
  partnerEmail: yup.string().email(),
  partnerPermanentAddress: yup.string(),
  partnerTemporaryAddress: yup.string(),

  // Step 5: Area Coverage and Additional Information
  additionalInfo: yup.string(),
  additionalInfo2: yup.string(),
  additionalInfo3: yup.string(),

  // Step 6: Document Upload
  citizenshipCertificate: yup.boolean(),
  citizenshipFile: yup.mixed().required("‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§§‡§æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ"),
  companyRegistration: yup.boolean(),
  companyRegistrationFile: yup.mixed().required("‡§ï‡§Æ‡•ç‡§™‡§®‡•Ä ‡§¶‡§∞‡•ç‡§§‡§æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ"),
  panVat: yup.boolean(),
  panVatFile: yup.mixed().required("PAN/VAT ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ"),
  officePhoto: yup.boolean(),
  officePhotoFile: yup.mixed(),
  otherDocuments: yup.boolean(),
  otherDocumentsFile: yup.mixed(),

  // Step 7: Agreement and signature
  agreementAccepted: yup.boolean().oneOf([true], "‡§∏‡§π‡§Æ‡§§‡§ø ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç"),
  distributorSignatureName: yup.string(),
  distributorSignatureDate: yup.string(),
});

// Nepali districts for dropdown
const nepalDistricts = [
  '‡§ï‡§æ‡§†‡§Æ‡§æ‡§°‡•å‡§Ç', '‡§≤‡§≤‡§ø‡§§‡§™‡•Å‡§∞', '‡§≠‡§ï‡•ç‡§§‡§™‡•Å‡§∞', '‡§®‡•Å‡§µ‡§æ‡§ï‡•ã‡§ü', '‡§∞‡§∏‡•Å‡§µ‡§æ', '‡§ß‡§æ‡§¶‡§ø‡§ô', '‡§Æ‡§ï‡§µ‡§æ‡§®‡§™‡•Å‡§∞', '‡§∏‡§ø‡§®‡•ç‡§ß‡•Å‡§≤‡•Ä', '‡§ï‡§æ‡§µ‡§∞‡•á‡§™‡§≤‡§æ‡§û‡•ç‡§ö‡•ã‡§ï', '‡§¶‡•ã‡§≤‡§ñ‡§æ', '‡§∏‡§ø‡§®‡•ç‡§ß‡•Å‡§™‡§æ‡§≤‡•ç‡§ö‡•ã‡§ï', '‡§∞‡§æ‡§Æ‡•á‡§õ‡§æ‡§™',
  '‡§ö‡§ø‡§§‡§µ‡§®', '‡§ó‡•ã‡§∞‡§ñ‡§æ', '‡§≤‡§Æ‡§ú‡•Å‡§ô', '‡§§‡§®‡§π‡•Å‡§Å', '‡§∏‡•ç‡§Ø‡§æ‡§ô‡•ç‡§ú‡§æ', '‡§ï‡§æ‡§∏‡•ç‡§ï‡•Ä', '‡§Æ‡§®‡§æ‡§ô', '‡§Æ‡•Å‡§∏‡•ç‡§§‡§æ‡§ô', '‡§Æ‡•ç‡§Ø‡§æ‡§ó‡•ç‡§¶‡•Ä', '‡§™‡§∞‡•ç‡§µ‡§§', '‡§¨‡§æ‡§ó‡§≤‡•Å‡§ô', '‡§ó‡•Å‡§≤‡•ç‡§Æ‡•Ä', '‡§™‡§æ‡§≤‡•ç‡§™‡§æ', '‡§Ö‡§∞‡•ç‡§ò‡§æ‡§ñ‡§æ‡§Å‡§ö‡•Ä',
  '‡§®‡§µ‡§≤‡§™‡§∞‡§æ‡§∏‡•Ä (‡§¨‡§∞‡•ç‡§¶‡§ò‡§æ‡§ü ‡§∏‡•Å‡§∏‡•ç‡§§‡§æ ‡§™‡•Ç‡§∞‡•ç‡§µ)', '‡§∞‡•Å‡§™‡§®‡•ç‡§¶‡•á‡§π‡•Ä', '‡§ï‡§™‡§ø‡§≤‡§µ‡§∏‡•ç‡§§‡•Å', '‡§¶‡§æ‡§ô', '‡§™‡•ç‡§Ø‡•Ç‡§†‡§æ‡§®', '‡§∞‡•ã‡§≤‡•ç‡§™‡§æ', '‡§∞‡•Å‡§ï‡•Å‡§Æ (‡§™‡•Ç‡§∞‡•ç‡§µ‡•Ä ‡§≠‡§æ‡§ó)', '‡§∏‡§≤‡•ç‡§Ø‡§æ‡§®', '‡§∏‡•Å‡§∞‡•ç‡§ñ‡•á‡§§', '‡§¨‡§æ‡§Å‡§ï‡•á', '‡§¨‡§∞‡•ç‡§¶‡§ø‡§Ø‡§æ',
  '‡§ï‡•à‡§≤‡§æ‡§≤‡•Ä', '‡§ï‡§û‡•ç‡§ö‡§®‡§™‡•Å‡§∞', '‡§°‡§°‡•á‡§≤‡•ç‡§ß‡•Å‡§∞‡§æ', '‡§¨‡•à‡§§‡§°‡•Ä', '‡§¶‡§æ‡§∞‡•ç‡§ö‡•Å‡§≤‡§æ', '‡§¨‡§æ‡§ú‡•Å‡§∞‡§æ', '‡§Ö‡§õ‡§æ‡§Æ', '‡§°‡•ã‡§ü‡•Ä', '‡§ï‡§æ‡§≤‡•Ä‡§ï‡•ã‡§ü', '‡§ú‡•Å‡§Æ‡•ç‡§≤‡§æ', '‡§π‡•Å‡§Æ‡•ç‡§≤‡§æ', '‡§ï‡§∞‡§£‡§æ‡§≤‡•Ä', '‡§°‡•ã‡§≤‡•ç‡§™‡§æ', '‡§Æ‡•Å‡§ó‡•Å',
  '‡§∏‡•Å‡§¶‡•Ç‡§∞‡§™‡§∂‡•ç‡§ö‡§ø‡§Æ', '‡§ù‡§æ‡§™‡§æ', '‡§á‡§≤‡§æ‡§Æ', '‡§™‡§æ‡§Å‡§ö‡§•‡§∞', '‡§§‡§æ‡§™‡•ç‡§≤‡•á‡§ú‡•Å‡§ô', '‡§∏‡§Ç‡§ñ‡•Å‡§µ‡§æ‡§∏‡§≠‡§æ', '‡§§‡•á‡§π‡•ç‡§∞‡§•‡•Å‡§Æ', '‡§ß‡§®‡§ï‡•Å‡§ü‡§æ', '‡§≠‡•ã‡§ú‡§™‡•Å‡§∞', '‡§∏‡•ã‡§≤‡•Å‡§ñ‡•Å‡§Æ‡•ç‡§¨‡•Å', '‡§ì‡§ñ‡§≤‡§¢‡•Å‡§ô‡•ç‡§ó‡§æ', '‡§ñ‡•ã‡§ü‡§æ‡§ô', '‡§â‡§¶‡§Ø‡§™‡•Å‡§∞',
  '‡§∏‡§™‡•ç‡§§‡§∞‡•Ä', '‡§∏‡§ø‡§∞‡§æ‡§π‡§æ', '‡§ß‡§®‡•Å‡§∑‡§æ', '‡§Æ‡§π‡•ã‡§§‡•ç‡§§‡§∞‡•Ä', '‡§∏‡§∞‡•ç‡§≤‡§æ‡§π‡•Ä', '‡§¨‡§æ‡§∞‡§æ', '‡§™‡§∞‡•ç‡§∏‡§æ', '‡§∞‡•å‡§§‡§π‡§ü', '‡§Æ‡•ã‡§∞‡§ô', '‡§∏‡•Å‡§®‡§∏‡§∞‡•Ä'
];

interface FormData {
  // Step 1: Personal Details
  fullName?: string;
  age?: number;
  gender?: string;
  citizenshipNumber?: string;
  issuedDistrict?: string;
  mobileNumber?: string;
  email?: string;
  permanentAddress?: string;
  temporaryAddress?: string;

  // Step 2: Business Details
  companyName?: string;
  registrationNumber?: string;
  panVatNumber?: string;
  officeAddress?: string;
  workAreaDistrict?: string;
  desiredDistributionArea?: string;
  currentBusiness?: string;
  businessType?: string;

  // Step 3: Staff and Infrastructure
  salesManCount?: number;
  salesManExperience?: string;
  driverCount?: number;
  driverExperience?: string;
  helperCount?: number;
  helperExperience?: string;
  accountantCount?: number;
  accountantExperience?: string;
  storageSpace?: number;
  storageDetails?: string;
  truckCount?: number;
  truckExperience?: string;
  fourWheelerCount?: number;
  fourWheelerExperience?: string;
  motorcycleCount?: number;
  motorcycleExperience?: string;
  cycleCount?: number;
  cycleExperience?: string;
  thelaCount?: number;
  thelaExperience?: string;

  // Current transactions
  currentTransactions?: any[];
  currentCompany1?: string;
  currentProducts1?: string;
  currentTurnover1?: string;
  currentCompany2?: string;
  currentProducts2?: string;
  currentTurnover2?: string;
  currentCompany3?: string;
  currentProducts3?: string;
  currentTurnover3?: string;
  currentCompany4?: string;
  currentProducts4?: string;
  currentTurnover4?: string;
  currentCompany5?: string;
  currentProducts5?: string;
  currentTurnover5?: string;

  // Step 4: Business Information
  productCategory?: string;
  businessExperience?: string;
  monthlyIncome?: string;
  storageFacility?: string;
  paymentPreference?: string;
  creditDays?: number;
  deliveryPreference?: string;

  // Products to distribute
  products?: any[];

  // Partnership Details
  partnerFullName?: string;
  partnerAge?: number;
  partnerGender?: string;
  partnerCitizenshipNumber?: string;
  partnerIssuedDistrict?: string;
  partnerMobileNumber?: string;
  partnerEmail?: string;
  partnerPermanentAddress?: string;
  partnerTemporaryAddress?: string;

  // Step 5: Area Coverage
  areaCoverageDetails?: any[];
  areaDescription1?: string;
  populationEstimate1?: string;
  competitorCompany1?: string;
  areaDescription2?: string;
  populationEstimate2?: string;
  competitorCompany2?: string;
  areaDescription3?: string;
  populationEstimate3?: string;
  competitorCompany3?: string;
  areaDescription4?: string;
  populationEstimate4?: string;
  competitorCompany4?: string;

  // Additional Information
  additionalInfo?: string;
  additionalInfo2?: string;
  additionalInfo3?: string;

  // Step 6: Document Upload
  citizenshipCertificate?: boolean;
  citizenshipFile?: File;
  companyRegistration?: boolean;
  companyRegistrationFile?: File;
  panVat?: boolean;
  panVatFile?: File;
  officePhoto?: boolean;
  officePhotoFile?: File;
  otherDocuments?: boolean;
  otherDocumentsFile?: FileList;
  
  // Step 7: Agreement and signature
  agreementAccepted?: boolean;
  distributorSignatureName?: string;
  distributorSignatureDate?: string;
}

const steps = [
  { id: 1, title: '‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£', subtitle: 'Personal Details' },
  { id: 2, title: '‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡§ø‡§ï ‡§µ‡§ø‡§µ‡§∞‡§£', subtitle: 'Business Details' },
  { id: 3, title: '‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä ‡§∞ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§ß‡§æ‡§∞', subtitle: 'Staff & Infrastructure' },
  { id: 4, title: '‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§∞ ‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡•Ä', subtitle: 'Products & Partnership' },
  { id: 5, title: '‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§∏‡§Ç‡§≤‡§ó‡•ç‡§®', subtitle: 'Document Upload' },
  { id: 6, title: '‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä', subtitle: 'Additional Information' },
  { id: 7, title: '‡§®‡§ø‡§Ø‡§Æ ‡§∞ ‡§∏‡§π‡§Æ‡§§‡§ø', subtitle: 'Terms & Agreement' },
  { id: 8, title: '‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ', subtitle: 'Review' },
];

// Main Form Component (wrapped with Context)
function DistributorFormContent() {
  const [currentStep, setCurrentStep] = useState(1);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  
  // Digital signature state
  const [signature, setSignature] = useState<string | null>(null);
  const [isDrawing, setIsDrawing] = useState(false);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [categories, setCategories] = useState<Array<{
    id: string, 
    title: string, 
    type: 'category' | 'subcategory',
    parentId?: string | null
  }>>([]);
  const [categoriesLoading, setCategoriesLoading] = useState(false);
  
  
  // Use Context API instead of local state
  const { allFormData, updateFormData, getCurrentFormData } = useFormData();

  // Fetch categories from API
  const fetchCategories = async () => {
    try {
      setCategoriesLoading(true);
      console.log('Fetching categories from API...');
      
      // Use the backend API URL
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api'}/categories`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        mode: 'cors', // Explicitly set CORS mode
      });
      
      if (response.ok) {
        const data = await response.json();
        
        if (data.success && data.data && Array.isArray(data.data)) {
          // Parse categories and create subcategories from description
          const categoriesWithSubcategories = data.data.flatMap(category => {
            const result = [{ 
              id: category.id, 
              title: category.title,
              type: 'category',
              parentId: null
            }];
            
            // Parse description for subcategories
            if (category.description) {
              const subcategories = category.description
                .split(',')
                .map(sub => sub.trim())
                .filter(sub => sub.length > 0)
                .map((sub, index) => ({
                  id: `${category.id}_sub_${index}`,
                  title: sub,
                  type: 'subcategory',
                  parentId: category.id
                }));
              
              result.push(...subcategories);
            }
            
            return result;
          });
          
          setCategories(categoriesWithSubcategories);
        } else {
          console.warn('Invalid data structure:', data);
          setCategories([]);
        }
      } else {
        console.warn('Failed to fetch categories, status:', response.status);
        setCategories([]);
      }
    } catch (error) {
      console.warn('Error fetching categories:', error);
      setCategories([]);
    } finally {
      setCategoriesLoading(false);
    }
  };

  // Fetch categories on component mount
  useEffect(() => {
    fetchCategories();
  }, []);


  const { control, handleSubmit, trigger, formState: { errors }, watch, reset, setValue } = useForm<FormData>({
    resolver: yupResolver(schema) as any,
    mode: 'onChange',
    defaultValues: {
      // Personal Details
      fullName: '',
      age: 18,
      gender: '',
      citizenshipNumber: '',
      issuedDistrict: '',
      mobileNumber: '',
      email: '',
      permanentAddress: '',
      temporaryAddress: '',
      
      // Business Details
      companyName: '',
      registrationNumber: '',
      panVatNumber: '',
      officeAddress: '',
      workAreaDistrict: '',
      desiredDistributionArea: '',
      
      // Staff & Infrastructure
      salesManCount: 0,
      salesManExperience: '',
      deliveryStaffCount: 0,
      deliveryStaffExperience: '',
      accountAssistantCount: 0,
      accountAssistantExperience: '',
      otherStaffCount: 0,
      otherStaffExperience: '',
      warehouseSpace: 0,
      warehouseDetails: '',
      truckCount: 0,
      truckDetails: '',
      fourWheelerCount: 0,
      fourWheelerDetails: '',
      twoWheelerCount: 0,
      twoWheelerDetails: '',
      cycleCount: 0,
      cycleDetails: '',
      thelaCount: 0,
      thelaDetails: '',
      
      // Products & Partnership
      partnerName: '',
      partnerAge: 18,
      partnerMobile: '',
      partnerEmail: '',
      partnerCitizenshipNumber: '',
      partnerIssuedDistrict: '',
      creditDays: 0,
      
      // Document Upload
      citizenshipDocument: null,
      companyRegistrationDocument: null,
      panVatDocument: null,
      digitalSignature: null,
      
      // Additional Information
      additionalInfo: '',
      termsAndConditions: '',
      
      // Agreement
      agreementAccepted: false,
      distributorSignatureName: '',
      distributorSignatureDate: getTodayNepaliDate(),
      
      // Dynamic Arrays
      currentTransactions: [{ company: '', products: '', turnover: '' }],
      products: [{ name: '', monthlySalesCapacity: '' }, { name: '', monthlySalesCapacity: '' }],
      areaCoverageDetails: [],
      currentBusiness: [{ businessType: '', products: '', turnover: '' }]
    }
  });

  // Field arrays for dynamic sections
  const { fields: transactionFields, append: appendTransaction, remove: removeTransaction } = useFieldArray({
    control,
    name: 'currentTransactions'
  });

  const { fields: productFields, append: appendProduct, remove: removeProduct } = useFieldArray({
    control,
    name: 'products'
  });

  const { fields: areaFields, append: appendArea, remove: removeArea } = useFieldArray({
    control,
    name: 'areaCoverageDetails'
  });

  const { fields: businessFields, append: appendBusiness, remove: removeBusiness } = useFieldArray({
    control,
    name: 'currentBusiness'
  });

  // Manage form state when step changes
  useEffect(() => {
    const contextData = getCurrentFormData();
    console.log(`üîÑ STEP ${currentStep} - Context data:`, contextData);
    
    // Default empty form data
    const emptyFormData = {
      fullName: '',
      age: '',
      gender: '',
      citizenshipNumber: '',
      issuedDistrict: '',
      mobileNumber: '',
      email: '',
      permanentAddress: '',
      temporaryAddress: '',
      companyName: '',
      registrationNumber: '',
      panVatNumber: '',
      officeAddress: '',
      workAreaDistrict: '',
      desiredDistributionArea: '',
      currentBusiness: '',
      businessType: '',
      salesManCount: 0,
      salesManExperience: '',
      deliveryStaffCount: 0,
      deliveryStaffExperience: '',
      accountAssistantCount: 0,
      accountAssistantExperience: '',
      otherStaffCount: 0,
      otherStaffExperience: '',
      warehouseSpace: 0,
      warehouseDetails: '',
      truckCount: 0,
      truckDetails: '',
      fourWheelerCount: 0,
      fourWheelerDetails: '',
      twoWheelerCount: 0,
      twoWheelerDetails: '',
      cycleCount: 0,
      cycleDetails: '',
      thelaCount: 0,
      thelaDetails: '',
      distributorSignatureName: '',
      distributorSignatureDate: getTodayNepaliDate(),
      productCategory: '',
      businessExperience: '',
      monthlyIncome: '',
      storageFacility: '',
      paymentPreference: '',
      creditDays: 0,
      deliveryPreference: '',
      partnerFullName: '',
      partnerAge: 18,
      partnerGender: '',
      partnerCitizenshipNumber: '',
      partnerIssuedDistrict: '',
      partnerMobileNumber: '',
      partnerEmail: '',
      partnerPermanentAddress: '',
      partnerTemporaryAddress: '',
      additionalInfo: '',
      additionalInfo2: '',
      additionalInfo3: '',
      agreementAccepted: false,
      distributorSignatureName: '',
      distributorSignatureDate: getTodayNepaliDate(),
      currentTransactions: [{ company: '', products: '', turnover: '' }],
      products: [{ name: '', monthlySalesCapacity: '' }, { name: '', monthlySalesCapacity: '' }],
      areaCoverageDetails: [],
      currentBusiness: [{ businessType: '', products: '', turnover: '' }]
    };
    
    // Merge context data with empty form data (context data takes precedence)
    const formDataToSet = { ...emptyFormData, ...contextData };
    
    reset(formDataToSet);
    console.log(`üîÑ STEP ${currentStep} - Form populated with context data for editing`);
  }, [currentStep, reset, getCurrentFormData]);

  // Initialize canvas drawing context
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Set up drawing context
    ctx.strokeStyle = '#000000';
    ctx.lineWidth = 2;
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';
  }, []);

  // Digital signature functions
  const startDrawing = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {
    e.preventDefault();
    setIsDrawing(true);
    const canvas = canvasRef.current;
    if (!canvas) return;

    const rect = canvas.getBoundingClientRect();
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Ensure proper drawing context setup
    ctx.strokeStyle = '#000000';
    ctx.lineWidth = 2;
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';

    // Get coordinates relative to canvas
    const x = 'touches' in e ? e.touches[0].clientX - rect.left : e.clientX - rect.left;
    const y = 'touches' in e ? e.touches[0].clientY - rect.top : e.clientY - rect.top;

    // Scale coordinates to match canvas internal dimensions
    const scaleX = canvas.width / rect.width;
    const scaleY = canvas.height / rect.height;
    const scaledX = x * scaleX;
    const scaledY = y * scaleY;

    // Ensure coordinates are within canvas bounds
    const boundedX = Math.max(0, Math.min(scaledX, canvas.width));
    const boundedY = Math.max(0, Math.min(scaledY, canvas.height));

    ctx.beginPath();
    ctx.moveTo(boundedX, boundedY);
  };

  const draw = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {
    if (!isDrawing) return;
    
    e.preventDefault();
    const canvas = canvasRef.current;
    if (!canvas) return;

    const rect = canvas.getBoundingClientRect();
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Ensure proper drawing context setup
    ctx.strokeStyle = '#000000';
    ctx.lineWidth = 2;
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';

    // Get coordinates relative to canvas
    const x = 'touches' in e ? e.touches[0].clientX - rect.left : e.clientX - rect.left;
    const y = 'touches' in e ? e.touches[0].clientY - rect.top : e.clientY - rect.top;

    // Scale coordinates to match canvas internal dimensions
    const scaleX = canvas.width / rect.width;
    const scaleY = canvas.height / rect.height;
    const scaledX = x * scaleX;
    const scaledY = y * scaleY;

    // Ensure coordinates are within canvas bounds
    const boundedX = Math.max(0, Math.min(scaledX, canvas.width));
    const boundedY = Math.max(0, Math.min(scaledY, canvas.height));

    ctx.lineTo(boundedX, boundedY);
    ctx.stroke();
  };

  const stopDrawing = () => {
    if (!isDrawing) return;
    setIsDrawing(false);
    
    const canvas = canvasRef.current;
    if (!canvas) return;

    // Save signature as high-quality data URL
    const signatureData = canvas.toDataURL('image/png', 1.0);
    setSignature(signatureData);
  };

  const clearSignature = () => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Clear the entire canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Reset canvas properties
    ctx.strokeStyle = '#000000';
    ctx.lineWidth = 3;
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';
    ctx.imageSmoothingEnabled = true;
    ctx.imageSmoothingQuality = 'high';
    
    setSignature(null);
  };

  // Initialize canvas context
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Set canvas properties for smooth drawing
    ctx.strokeStyle = '#000000';
    ctx.lineWidth = 3;
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';
    ctx.imageSmoothingEnabled = true;
    ctx.imageSmoothingQuality = 'high';
    
    // Set canvas size to match display size for better touch support
    const rect = canvas.getBoundingClientRect();
    const dpr = window.devicePixelRatio || 1;
    canvas.width = rect.width * dpr;
    canvas.height = rect.height * dpr;
    ctx.scale(dpr, dpr);
  }, []);

  // Auto-fill signature name from Step 1 full name
  useEffect(() => {
    const fullName = watch('fullName');
    if (fullName && currentStep === 7) {
      // Auto-fill the signature name field with the full name from Step 1
      setValue('distributorSignatureName', fullName);
    }
  }, [currentStep, watch, setValue]);

  const nextStep = async () => {
    // Get current form data and save it to Context
    const currentFormData = watch();
    console.log(`üîí STEP ${currentStep} - Capturing form data:`, currentFormData);
    
    // Clean and save to Context API (preserve form data!)
    const cleanedData = Object.entries(currentFormData).reduce((acc: any, [key, value]) => {
      if (value !== undefined && value !== null && value !== '') {
        if (typeof value === 'string' && value.trim() !== '') {
          acc[key] = value.trim();
        } else if (typeof value === 'number' && value >= 0) {
          acc[key] = value;
        } else if (typeof value === 'boolean') {
          acc[key] = value;
        } else if (Array.isArray(value) && value.length > 0) {
          acc[key] = value;
        } else if (value instanceof File || value instanceof FileList) {
          acc[key] = value;
        } else if (typeof value === 'object' && value !== null) {
          acc[key] = value;
        }
      }
      return acc;
    }, {});
    
    // Save to Context API
    updateFormData(cleanedData);
    console.log(`‚úÖ STEP ${currentStep} - Data saved to Context API`);
    
    // Validate current step if needed
    let fieldsToValidate: string[] = [];
    
    switch (currentStep) {
      case 1:
        fieldsToValidate = ['fullName', 'age', 'gender', 'citizenshipNumber', 'issuedDistrict', 'mobileNumber', 'email', 'permanentAddress'];
        break;
      case 2:
        fieldsToValidate = ['companyName', 'registrationNumber', 'panVatNumber', 'officeAddress', 'workAreaDistrict', 'desiredDistributionArea'];
        break;
      case 3:
        fieldsToValidate = [];
        break;
      case 4:
        fieldsToValidate = [];
        break;
      case 5:
        fieldsToValidate = ['citizenshipCertificate', 'citizenshipFile', 'companyRegistrationFile', 'panVatFile'];
        break;
      case 6:
        fieldsToValidate = [];
        break;
      case 7:
        fieldsToValidate = ['agreementAccepted', 'distributorSignatureName', 'distributorSignatureDate'];
        break;
      case 8:
        fieldsToValidate = []; // Review step - no validation needed
        break;
      default:
        fieldsToValidate = [];
    }

    if (fieldsToValidate.length > 0) {
      const isValid = await trigger(fieldsToValidate as any);
      const currentValues = watch();
      console.log('üîç Step', currentStep, 'validation:');
      console.log('Required fields:', fieldsToValidate);
      console.log('Current form values:', currentValues);
      console.log('Form errors:', errors);
      console.log('Validation result:', isValid);
      
      if (!isValid) {
        toast.error(`‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§´‡§ø‡§≤‡•ç‡§°‡§π‡§∞‡•Ç ‡§≠‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§ `, {
          duration: 5000,
          style: {
            background: '#fee2e2',
            color: '#dc2626',
            border: '1px solid #fecaca',
          },
        });
        return;
      }
    }

    if (currentStep < steps.length) {
      setCurrentStep(currentStep + 1);
      console.log(`üöÄ MOVED TO STEP ${currentStep + 1} - All data preserved in Context`);
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
      console.log(`üîô MOVED TO STEP ${currentStep - 1}`);
    }
  };

  const handleFormSubmit = async (data: any) => {
    console.log('üéØ handleFormSubmit called with:', data);
    console.log('Current step:', currentStep);
    console.log('Total steps:', steps.length);
    
    // Force save current step data before submission
    if (currentStep === 8) {
      const currentFormData = watch();
      console.log('üîÑ Force saving final step data:', currentFormData);
      updateFormData(currentFormData);
    }
    
    try {
      await onSubmit(data);
    } catch (error) {
      console.error('Form submission error:', error);
      toast.error('Form submission failed: ' + (error as Error).message, {
        duration: 5000,
        style: {
          background: '#fee2e2',
          color: '#dc2626',
          border: '1px solid #fecaca',
        },
      });
    }
  };

  const onSubmit = async (data: any) => {
    console.log('üöÄ Form submission started!');
    console.log('üîç Raw form data:', data);
    
    // Save current step data to Context one final time
    if (currentStep === 8) {
      console.log('üìù Final step submission - saving current data and using Context');
      const currentFormData = watch();
      updateFormData(currentFormData);
    }
    
    setIsSubmitting(true);
    try {
      // Get all data from Context API (this has ALL accumulated data)
      const contextData = getCurrentFormData();
      const currentFormData = watch();
      
      console.log('üîç Current form data from watch():', currentFormData);
      console.log('üîç ALL CONTEXT DATA (all steps):', contextData);
      
      // Merge Context data with current form data
      const finalData: any = {
        ...contextData,     // All previous steps data from Context
        ...currentFormData  // Current step data
      };
      
      console.log('üîç FINAL MERGED DATA FOR SUBMISSION:', finalData);
      console.log('üîç TOTAL FIELDS IN FINAL DATA:', Object.keys(finalData).length);
      
      // Check if we have essential data - be more lenient
      console.log('üîç Checking essential data:');
      console.log('finalData.fullName:', finalData.fullName);
      console.log('contextData.fullName:', contextData.fullName);
      
      if (!finalData.fullName && !contextData.fullName) {
        console.log('‚ö†Ô∏è No fullName found, but continuing with submission...');
      }
      
      // Structure data according to backend database schema
      const applicationData = {
        personalDetails: {
          fullName: finalData.fullName || '',
          age: parseInt(finalData.age) || 18,
          gender: finalData.gender || '‡§™‡•Å‡§∞‡•Å‡§∑',
          citizenshipNumber: finalData.citizenshipNumber || '',
          issuedDistrict: finalData.issuedDistrict || '',
          mobileNumber: finalData.mobileNumber || '',
          email: finalData.email || '',
          permanentAddress: finalData.permanentAddress || '',
          temporaryAddress: finalData.temporaryAddress || ''
        },
        businessDetails: {
          companyName: finalData.companyName || '',
          registrationNumber: finalData.registrationNumber || '',
          panVatNumber: finalData.panVatNumber || '',
          officeAddress: finalData.officeAddress || '',
          operatingArea: finalData.workAreaDistrict || finalData.officeAddress || '‡§ï‡§æ‡§†‡§Æ‡§æ‡§°‡•å‡§Ç',
          desiredDistributorArea: finalData.desiredDistributionArea || finalData.workAreaDistrict || '‡§ï‡§æ‡§†‡§Æ‡§æ‡§°‡•å‡§Ç',
          currentBusiness: Array.isArray(finalData.currentBusiness) 
            ? finalData.currentBusiness.map((b: any) => `${b.businessType}: ${b.products} (${b.turnover})`).join('; ')
            : finalData.currentBusiness || '',
          businessType: finalData.businessType || '‡§ñ‡•Å‡§¶‡•ç‡§∞‡§æ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞'
        },
        staffInfrastructure: {
          salesManCount: parseInt(finalData.salesManCount?.toString() || '0') || 0,
          salesManExperience: finalData.salesManExperience || '',
          deliveryStaffCount: parseInt(finalData.deliveryStaffCount?.toString() || '0') || 0,
          deliveryStaffExperience: finalData.deliveryStaffExperience || '',
          accountAssistantCount: parseInt(finalData.accountAssistantCount?.toString() || '0') || 0,
          accountAssistantExperience: finalData.accountAssistantExperience || '',
          otherStaffCount: parseInt(finalData.otherStaffCount?.toString() || '0') || 0,
          otherStaffExperience: finalData.otherStaffExperience || '',
          warehouseSpace: parseInt(finalData.warehouseSpace?.toString() || '0') || 0,
          warehouseDetails: finalData.warehouseDetails || '',
          truckCount: parseInt(finalData.truckCount?.toString() || '0') || 0,
          truckDetails: finalData.truckDetails || '',
          fourWheelerCount: parseInt(finalData.fourWheelerCount?.toString() || '0') || 0,
          fourWheelerDetails: finalData.fourWheelerDetails || '',
          twoWheelerCount: parseInt(finalData.twoWheelerCount?.toString() || '0') || 0,
          twoWheelerDetails: finalData.twoWheelerDetails || '',
          cycleCount: parseInt(finalData.cycleCount?.toString() || '0') || 0,
          cycleDetails: finalData.cycleDetails || '',
          thelaCount: parseInt(finalData.thelaCount?.toString() || '0') || 0,
          thelaDetails: finalData.thelaDetails || ''
        },
        businessInformation: {
          productCategory: finalData.productCategory || '‡§ñ‡§æ‡§¶‡•ç‡§Ø ‡§µ‡§∏‡•ç‡§§‡•Å',
          yearsInBusiness: parseInt(finalData.businessExperience) || 1,
          monthlySales: finalData.monthlyIncome || '0',
          storageFacility: finalData.storageFacility || '‡§Ü‡§ß‡§æ‡§∞‡§≠‡•Ç‡§§ ‡§≠‡§£‡•ç‡§°‡§æ‡§∞‡§£'
        },
        retailerRequirements: {
          preferredProducts: finalData.products?.map((p: any) => p.name).join(', ') || '',
          monthlyOrderQuantity: finalData.products?.reduce((sum: number, p: any) => sum + parseInt(p.monthlySalesCapacity || 0), 0).toString() || '0',
          paymentPreference: finalData.paymentPreference || '‡§®‡§ó‡§¶',
          creditDays: parseInt(finalData.creditDays?.toString() || '0') || 0,
          deliveryPreference: finalData.deliveryPreference || '‡§∏‡•ç‡§µ‡§Ø‡§Ç ‡§â‡§†‡§æ‡§â‡§®‡•á'
        },
        partnershipDetails: finalData.partnerFullName ? {
          partnerFullName: finalData.partnerFullName,
          partnerAge: parseInt(finalData.partnerAge?.toString() || '0') || 0,
          partnerGender: finalData.partnerGender || '',
          partnerCitizenshipNumber: finalData.partnerCitizenshipNumber || '',
          partnerIssuedDistrict: finalData.partnerIssuedDistrict || '',
          partnerMobileNumber: finalData.partnerMobileNumber || '',
          partnerEmail: finalData.partnerEmail || '',
          partnerPermanentAddress: finalData.partnerPermanentAddress || '',
          partnerTemporaryAddress: finalData.partnerTemporaryAddress || ''
        } : null,
        additionalInformation: {
          additionalInfo1: finalData.additionalInfo || '',
          additionalInfo2: finalData.additionalInfo2 || '',
          additionalInfo3: finalData.additionalInfo3 || ''
        },
        declaration: {
          declaration: finalData.agreementAccepted === true,
          signature: finalData.distributorSignatureName || finalData.fullName || '',
          date: finalData.distributorSignatureDate || getTodayNepaliDate()
        },
        agreement: {
          agreementAccepted: finalData.agreementAccepted === true,
          distributorSignatureName: finalData.distributorSignatureName || finalData.fullName || '',
          distributorSignatureDate: finalData.distributorSignatureDate || getTodayNepaliDate(),
          digitalSignature: null // Signature removed from review section
        },
        currentTransactions: finalData.currentTransactions || [],
        productsToDistribute: finalData.products || [],
        areaCoverageDetails: finalData.areaCoverageDetails || []
      };

      // Handle file uploads separately
      const formData = new FormData();
      formData.append('data', JSON.stringify(applicationData));

      // Add files if they exist - using correct field names that match backend upload middleware
      if (finalData.citizenshipFile) {
        const file = finalData.citizenshipFile instanceof FileList
          ? finalData.citizenshipFile[0]
          : finalData.citizenshipFile;
        if (file) {
          formData.append('citizenshipId', file);
        }
      }
      if (finalData.companyRegistrationFile) {
        const file = finalData.companyRegistrationFile instanceof FileList
          ? finalData.companyRegistrationFile[0]
          : finalData.companyRegistrationFile;
        if (file) {
          formData.append('companyRegistration', file);
        }
      }
      if (finalData.panVatFile) {
        const file = finalData.panVatFile instanceof FileList
          ? finalData.panVatFile[0]
          : finalData.panVatFile;
        if (file) {
          formData.append('panVatRegistration', file);
        }
      }
      if (finalData.officePhotoFile) {
        const file = finalData.officePhotoFile instanceof FileList
          ? finalData.officePhotoFile[0]
          : finalData.officePhotoFile;
        if (file) {
          formData.append('officePhoto', file);
        }
      }
      if (finalData.otherDocumentsFile) {
        const file = finalData.otherDocumentsFile instanceof FileList
          ? finalData.otherDocumentsFile[0]
          : finalData.otherDocumentsFile;
        if (file) {
          formData.append('areaMap', file);
        }
      }

      // Digital signature removed from review section
      // No signature file upload needed

      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api'}/applications/submit`, {
        method: 'POST',
        body: formData,
      });

      console.log('Response status:', response.status);

      if (response.ok) {
        const result = await response.json();
        console.log('Application submitted successfully:', result);
        setIsSubmitted(true);
      } else {
        const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));
        console.error('Submission failed:', errorData);
        toast.error(`‡§Ü‡§µ‡•á‡§¶‡§® ‡§™‡•á‡§∂ ‡§ó‡§∞‡•ç‡§® ‡§Ö‡§∏‡§´‡§≤ ‡§≠‡§Ø‡•ã‡•§ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø `, {
          duration: 6000,
          style: {
            background: '#fee2e2',
            color: '#dc2626',
            border: '1px solid #fecaca',
          },
        });
      }
    } catch (error) {
      console.error('Error submitting form:', error);
      toast.error(`‡§Ü‡§µ‡•á‡§¶‡§® ‡§™‡•á‡§∂ ‡§ó‡§∞‡•ç‡§® ‡§Ö‡§∏‡§´‡§≤ ‡§≠‡§Ø‡•ã‡•§ ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø `, {
        duration: 6000,
        style: {
          background: '#fee2e2',
          color: '#dc2626',
          border: '1px solid #fecaca',
        },
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Render step content based on current step
  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-[#001011] mb-6 absans">‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£</h3>
            
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
              <div className="sm:col-span-2">
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                  ‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ (Full Name) *
                </label>
                <Controller
                  name="fullName"
                  control={control}
                  rules={{ required: "‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ" }}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="text"
                      className={`w-full px-6 py-4 border rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans ${
                        errors.fullName ? 'border-red-300' : field.value ? 'border-orange-400' : 'border-gray-300'
                      }`}
                      placeholder="‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ ‡§≤‡•á‡§ñ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç"
                    />
                  )}
                />
                {errors.fullName && (
                  <p className="text-red-500 text-sm mt-1">{errors.fullName.message}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                  ‡§â‡§Æ‡•á‡§∞ (Age) *
                </label>
                <Controller
                  name="age"
                  control={control}
                  rules={{ required: "‡§â‡§Æ‡•á‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ" }}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="number"
                      min="18"
                      className={`w-full px-6 py-4 border rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans ${
                        errors.age ? 'border-red-300' : field.value ? 'border-orange-400' : 'border-gray-300'
                      }`}
                      placeholder="‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§â‡§Æ‡•á‡§∞"
                    />
                  )}
                />
                {errors.age && (
                  <p className="text-red-500 text-sm mt-1">{errors.age.message}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                  ‡§≤‡§ø‡§ô‡•ç‡§ó (Gender)*
                </label>
                <Controller
                  name="gender"
                  control={control}
                  rules={{ required: "‡§≤‡§ø‡§ô‡•ç‡§ó ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ" }}
                  render={({ field }) => (
                    <div className="flex gap-4">
                      <label className="flex items-center">
                        <input
                          type="radio"
                          {...field}
                          value="‡§™‡•Å‡§∞‡•Å‡§∑"
                          checked={field.value === '‡§™‡•Å‡§∞‡•Å‡§∑'}
                          className="mr-2"
                        />
                        <span className="text-sm text-[#001011] absans">‡§™‡•Å‡§∞‡•Å‡§∑</span>
                      </label>
                      <label className="flex items-center">
                        <input
                          type="radio"
                          {...field}
                          value="‡§Æ‡§π‡§ø‡§≤‡§æ"
                          checked={field.value === '‡§Æ‡§π‡§ø‡§≤‡§æ'}
                          className="mr-2"
                        />
                        <span className="text-sm text-[#001011] absans">‡§Æ‡§π‡§ø‡§≤‡§æ</span>
                      </label>
                      <label className="flex items-center">
                        <input
                          type="radio"
                          {...field}
                          value="‡§Ö‡§®‡•ç‡§Ø"
                          checked={field.value === '‡§Ö‡§®‡•ç‡§Ø'}
                          className="mr-2"
                        />
                        <span className="text-sm text-[#001011] absans">‡§Ö‡§®‡•ç‡§Ø</span>
                      </label>
                    </div>
                  )}
                />
                {errors.gender && (
                  <p className="text-red-500 text-sm mt-1">{errors.gender.message}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                  ‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞ (Citizenship No) *
                </label>
                <Controller
                  name="citizenshipNumber"
                  control={control}
                  rules={{ required: "‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ" }}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="text"
                      className={`w-full px-6 py-4 border rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans ${
                        errors.citizenshipNumber ? 'border-red-300' : field.value ? 'border-orange-400' : 'border-gray-300'
                      }`}
                      placeholder="‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞"
                    />
                  )}
                />
                {errors.citizenshipNumber && (
                  <p className="text-red-500 text-sm mt-1">{errors.citizenshipNumber.message}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                  ‡§ú‡§æ‡§∞‡•Ä ‡§ú‡§ø‡§≤‡•ç‡§≤‡§æ (Issued District) *
                </label>
                <Controller
                  name="issuedDistrict"
                  control={control}
                  rules={{ required: "‡§ú‡§æ‡§∞‡•Ä ‡§ú‡§ø‡§≤‡•ç‡§≤‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ" }}
                  render={({ field }) => (
                    <select
                      {...field}
                      className={`w-full px-6 py-4 border rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] absans ${
                        errors.issuedDistrict ? 'border-red-300' : field.value ? 'border-orange-400' : 'border-gray-300'
                      }`}
                    >
                      <option value="">‡§ú‡§ø‡§≤‡•ç‡§≤‡§æ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</option>
                      {nepalDistricts.map((district) => (
                        <option key={district} value={district}>
                          {district}
                        </option>
                      ))}
                    </select>
                  )}
                />
                {errors.issuedDistrict && (
                  <p className="text-red-500 text-sm mt-1">{errors.issuedDistrict.message}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                  ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Æ‡•ç‡§¨‡§∞ (Contact Number) *
                </label>
                <Controller
                  name="mobileNumber"
                  control={control}
                  rules={{ required: "‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Æ‡•ç‡§¨‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ" }}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="tel"
                      className={`w-full px-6 py-4 border rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans ${
                        errors.mobileNumber ? 'border-red-300' : field.value ? 'border-orange-400' : 'border-gray-300'
                      }`}
                      placeholder="9xxxxxxxxx"
                    />
                  )}
                />
                {errors.mobileNumber && (
                  <p className="text-red-500 text-sm mt-1">{errors.mobileNumber.message}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                  ‡§á‡§Æ‡•á‡§≤ ‡§†‡•á‡§ó‡§æ‡§®‡§æ (Email Address) *
                </label>
                <Controller
                  name="email"
                  control={control}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="email"
                      className={`w-full px-6 py-4 border rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans ${
                        errors.email ? 'border-red-300' : field.value ? 'border-orange-400' : 'border-gray-300'
                      }`}
                      placeholder="example@email.com"
                    />
                  )}
                />
                {errors.email && (
                  <p className="text-red-500 text-sm mt-1">{errors.email.message}</p>
                )}
              </div>

              <div className="sm:col-span-2">
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                  ‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§†‡•á‡§ó‡§æ‡§®‡§æ (Permanent Address) *
                </label>
                <Controller
                  name="permanentAddress"
                  control={control}
                  rules={{ required: "‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§†‡•á‡§ó‡§æ‡§®‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ" }}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="text"
                      className={`w-full px-6 py-4 border rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans ${
                        errors.permanentAddress ? 'border-red-300' : field.value ? 'border-orange-400' : 'border-gray-300'
                      }`}
                      placeholder="‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§†‡•á‡§ó‡§æ‡§®‡§æ"
                    />
                  )}
                />
                {errors.permanentAddress && (
                  <p className="text-red-500 text-sm mt-1">{errors.permanentAddress.message}</p>
                )}
              </div>

              <div className="sm:col-span-2">
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                  ‡§Ö‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§†‡•á‡§ó‡§æ‡§®‡§æ (Temporary Address)
                </label>
                <Controller
                  name="temporaryAddress"
                  control={control}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="text"
                      className={`w-full px-6 py-4 border rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans ${
                        field.value ? 'border-orange-400' : 'border-gray-300'
                      }`}
                      placeholder="‡§Ö‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§†‡•á‡§ó‡§æ‡§®‡§æ"
                    />
                  )}
                />
              </div>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-[#001011] mb-6 absans">‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡§ø‡§ï ‡§µ‡§ø‡§µ‡§∞‡§£</h3>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Left Column */}
              <div className="space-y-6">
              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                    ‡§ï‡§Æ‡•ç‡§™‡§®‡•Ä‡§ï‡•ã ‡§®‡§æ‡§Æ *
                </label>
                <Controller
                  name="companyName"
                  control={control}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="text"
                        className={`w-full px-6 py-4 border rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans ${
                          errors.companyName ? 'border-red-300' : field.value ? 'border-orange-400' : 'border-gray-300'
                        }`}
                      placeholder="‡§ï‡§Æ‡•ç‡§™‡§®‡•Ä‡§ï‡•ã ‡§®‡§æ‡§Æ"
                    />
                  )}
                />
                  {errors.companyName && (
                    <p className="text-red-500 text-sm mt-1">{errors.companyName.message}</p>
                  )}
              </div>

              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                    ‡§¶‡§∞‡•ç‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞/‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§∂‡§® ‡§®‡§Æ‡•ç‡§¨‡§∞ *
                </label>
                <Controller
                  name="registrationNumber"
                  control={control}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="text"
                        className={`w-full px-6 py-4 border rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans ${
                          errors.registrationNumber ? 'border-red-300' : field.value ? 'border-orange-400' : 'border-gray-300'
                        }`}
                      placeholder="‡§¶‡§∞‡•ç‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞"
                    />
                  )}
                />
                  {errors.registrationNumber && (
                    <p className="text-red-500 text-sm mt-1">{errors.registrationNumber.message}</p>
                  )}
              </div>

              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                    PAN/VAT ‡§®‡§Æ‡•ç‡§¨‡§∞ *
                </label>
                <Controller
                  name="panVatNumber"
                  control={control}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="text"
                        className={`w-full px-6 py-4 border rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] absans ${
                          errors.panVatNumber ? 'border-red-300' : field.value ? 'border-orange-400' : 'border-gray-300'
                        }`}
                      placeholder="PAN/VAT ‡§®‡§Æ‡•ç‡§¨‡§∞"
                    />
                  )}
                />
                  {errors.panVatNumber && (
                    <p className="text-red-500 text-sm mt-1">{errors.panVatNumber.message}</p>
                  )}
                </div>
              </div>

              {/* Right Column */}
              <div className="space-y-6">
              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                    ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø‡§ï‡•ã ‡§†‡•á‡§ó‡§æ‡§®‡§æ *
                </label>
                <Controller
                  name="officeAddress"
                  control={control}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="text"
                        className={`w-full px-6 py-4 border rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] absans ${
                          errors.officeAddress ? 'border-red-300' : field.value ? 'border-orange-400' : 'border-gray-300'
                        }`}
                      placeholder="‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø‡§ï‡•ã ‡§†‡•á‡§ó‡§æ‡§®‡§æ"
                    />
                  )}
                />
                  {errors.officeAddress && (
                    <p className="text-red-500 text-sm mt-1">{errors.officeAddress.message}</p>
                  )}
              </div>

              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                    ‡§ï‡§æ‡§Æ ‡§ó‡§∞‡•ç‡§®‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞/‡§ú‡§ø‡§≤‡•ç‡§≤‡§æ *
                </label>
                <Controller
                  name="workAreaDistrict"
                  control={control}
                  render={({ field }) => (
                    <select
                      {...field}
                        className={`w-full px-6 py-4 border rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] absans ${
                          errors.workAreaDistrict ? 'border-red-300' : field.value ? 'border-orange-400' : 'border-gray-300'
                        }`}
                    >
                      <option value="">‡§ú‡§ø‡§≤‡•ç‡§≤‡§æ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</option>
                      {nepalDistricts.map((district) => (
                        <option key={district} value={district}>
                          {district}
                        </option>
                      ))}
                    </select>
                  )}
                />
                  {errors.workAreaDistrict && (
                    <p className="text-red-500 text-sm mt-1">{errors.workAreaDistrict.message}</p>
                  )}
              </div>

              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                    ‡§µ‡§ø‡§§‡§∞‡§ï ‡§¨‡§®‡•ç‡§® ‡§ö‡§æ‡§π‡§®‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ *
                </label>
                <Controller
                    name="desiredDistributionArea"
                  control={control}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="text"
                        className={`w-full px-6 py-4 border rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] absans ${
                          errors.desiredDistributionArea ? 'border-red-300' : field.value ? 'border-orange-400' : 'border-gray-300'
                        }`}
                        placeholder="‡§µ‡§ø‡§§‡§∞‡§ï ‡§¨‡§®‡•ç‡§® ‡§ö‡§æ‡§π‡§®‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞"
                    />
                  )}
                />
                  {errors.desiredDistributionArea && (
                    <p className="text-red-500 text-sm mt-1">{errors.desiredDistributionArea.message}</p>
                  )}
              </div>
              </div>
            </div>

            {/* Current Business Section - Full Width */}
            <div className="mt-8">
              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                  ‡§π‡§æ‡§≤‡§ï‡•ã ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£
                </label>
                <p className="text-sm text-[#001011] mb-3 absans">
                  ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡§≤‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£‡§π‡§∞‡•Ç ‡§≤‡•á‡§ñ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç: ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡§ï‡•ã ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞, ‡§¨‡•á‡§ö‡•ç‡§®‡•á ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç, ‡§∞ ‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§ü‡§∞‡•ç‡§®‡§ì‡§≠‡§∞ (Please provide: Business type, Products you sell, and Annual turnover)
                </p>
                
                <div className="space-y-4">
                  {businessFields.map((field, index) => (
                    <div key={field.id} className="border border-gray-200 rounded-lg p-4 bg-gray-50">
                      <div className="flex justify-between items-center mb-3">
                        <h4 className="text-sm font-bold text-[#001011] absans">
                          ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞ {index + 1} (Business {index + 1})
                        </h4>
                        {index > 0 && (
                          <button
                            type="button"
                            onClick={() => removeBusiness(index)}
                            className="px-3 py-1 bg-red-600 text-white rounded text-sm hover:bg-red-700 transition-colors absans"
                          >
                            ‡§π‡§ü‡§æ‡§â‡§®‡•Å‡§π‡•ã‡§∏‡•ç (Remove)
                          </button>
                        )}
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                          <label className="block text-xs font-bold text-[#001011] mb-1 absans">
                            ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡§ï‡•ã ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ * (Business type *)
                </label>
                <Controller
                            name={`currentBusiness.${index}.businessType`}
                  control={control}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="text"
                                className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] text-sm absans"
                                placeholder="‡§ú‡§∏‡•ç‡§§‡•à: ‡§ñ‡•Å‡§¶‡•ç‡§∞‡§æ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞"
                    />
                  )}
                />
              </div>
                        
                        <div>
                          <label className="block text-xs font-bold text-[#001011] mb-1 absans">
                            ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç * (Products *)
                          </label>
                          <Controller
                            name={`currentBusiness.${index}.products`}
                            control={control}
                            render={({ field }) => (
                              <input
                                {...field}
                                type="text"
                                className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] text-sm absans"
                                placeholder="‡§ú‡§∏‡•ç‡§§‡•à: ‡§ñ‡§æ‡§¶‡•ç‡§Ø ‡§µ‡§∏‡•ç‡§§‡•Å, ‡§ï‡§™‡§°‡§æ"
                              />
                            )}
                          />
                        </div>
                        
                        <div>
                          <label className="block text-xs font-bold text-[#001011] mb-1 absans">
                            ‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§ü‡§∞‡•ç‡§®‡§ì‡§≠‡§∞ * (Annual turnover *)
                          </label>
                          <Controller
                            name={`currentBusiness.${index}.turnover`}
                            control={control}
                            render={({ field }) => (
                              <input
                                {...field}
                                type="text"
                                className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] text-sm absans"
                                placeholder="‡§ú‡§∏‡•ç‡§§‡•à: ‡•´‡•¶ ‡§≤‡§æ‡§ñ ‡§∞‡•Å‡§™‡•à‡§Ø‡§æ‡§Å"
                              />
                            )}
                          />
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  <button
                    type="button"
                    onClick={() => appendBusiness({ businessType: '', products: '', turnover: '' })}
                    className="w-full py-2 px-4 border-2 border-dashed border-gray-300 rounded-lg text-[#001011] hover:border-blue-500 hover:text-blue-500 transition-colors text-sm absans"
                  >
                    + ‡§Ö‡§∞‡•ç‡§ï‡•ã ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞ ‡§•‡§™‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç (Add Another Business)
                  </button>
                </div>
              </div>
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-[#001011] mb-6 absans">‡•©. ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§∞‡§§ ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä ‡§∞ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§ß‡§æ‡§∞‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£ (Working Staff and Infrastructure Details)</h3>
            
            <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-4 py-3 text-left text-sm font-bold text-[#001011] border-b border-gray-200 absans">
                        ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä ‡§™‡§¶ (Employee Position)
                      </th>
                      <th className="px-4 py-3 text-left text-sm font-bold text-[#001011] border-b border-gray-200 absans">
                        ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ (Number)
                      </th>
                      <th className="px-4 py-3 text-left text-sm font-bold text-[#001011] border-b border-gray-200 absans">
                        ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§µ‡§ø‡§µ‡§∞‡§£ (Experience Details)
                      </th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200">
                    {/* Sales Man */}
                    <tr>
                      <td className="px-4 py-3 text-sm text-[#001011] absans">
                        ‡§∏‡•á‡§≤‡•ç‡§∏ ‡§Æ‡•ç‡§Ø‡§æ‡§® (Sales Man)
                      </td>
                      <td className="px-4 py-3">
                    <Controller
                      name="salesManCount"
                      control={control}
                      render={({ field }) => (
                        <input
                          {...field}
                          type="number"
                          min="0"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                          placeholder="0"
                        />
                      )}
                    />
                      </td>
                      <td className="px-4 py-3">
                        <Controller
                          name="salesManExperience"
                          control={control}
                          render={({ field }) => (
                            <input
                              {...field}
                              type="text"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                              placeholder="Experience details"
                            />
                          )}
                        />
                      </td>
                    </tr>

                    {/* Delivery Staff */}
                    <tr>
                      <td className="px-4 py-3 text-sm text-[#001011] absans">
                        ‡§°‡•á‡§≤‡§ø‡§≠‡§∞‡•Ä ‡§∏‡•ç‡§ü‡§æ‡§´ (Delivery Staff)
                      </td>
                      <td className="px-4 py-3">
                    <Controller
                          name="deliveryStaffCount"
                      control={control}
                      render={({ field }) => (
                        <input
                          {...field}
                          type="number"
                          min="0"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                          placeholder="0"
                        />
                      )}
                    />
                      </td>
                      <td className="px-4 py-3">
                        <Controller
                          name="deliveryStaffExperience"
                          control={control}
                          render={({ field }) => (
                            <input
                              {...field}
                              type="text"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                              placeholder="Experience details"
                            />
                          )}
                        />
                      </td>
                    </tr>

                    {/* Account Assistant */}
                    <tr>
                      <td className="px-4 py-3 text-sm text-[#001011] absans">
                        ‡§≤‡•á‡§ñ‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï (Account Assistant)
                      </td>
                      <td className="px-4 py-3">
                    <Controller
                          name="accountAssistantCount"
                      control={control}
                      render={({ field }) => (
                        <input
                          {...field}
                          type="number"
                          min="0"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                          placeholder="0"
                        />
                      )}
                    />
                      </td>
                      <td className="px-4 py-3">
                        <Controller
                          name="accountAssistantExperience"
                          control={control}
                          render={({ field }) => (
                            <input
                              {...field}
                              type="text"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                              placeholder="Experience details"
                            />
                          )}
                        />
                      </td>
                    </tr>

                    {/* Other Staff */}
                    <tr>
                      <td className="px-4 py-3 text-sm text-[#001011] absans">
                        ‡§Ö‡§®‡•ç‡§Ø (‡§ñ‡•Å‡§≤‡§æ‡§â‡§®‡•Å‡§π‡•ã‡§∏‡•ç) (Other - Specify)
                      </td>
                      <td className="px-4 py-3">
                    <Controller
                          name="otherStaffCount"
                      control={control}
                      render={({ field }) => (
                        <input
                          {...field}
                          type="number"
                          min="0"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                          placeholder="0"
                        />
                      )}
                    />
                      </td>
                      <td className="px-4 py-3">
                        <Controller
                          name="otherStaffExperience"
                          control={control}
                          render={({ field }) => (
                            <input
                              {...field}
                              type="text"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                              placeholder="Specify other staff type and experience"
                            />
                          )}
                        />
                      </td>
                    </tr>

                    {/* Warehouse Space */}
                    <tr>
                      <td className="px-4 py-3 text-sm text-[#001011] absans">
                        ‡§ó‡•ã‡§¶‡§æ‡§Æ space Sq.Ft. (Warehouse space Sq.Ft.)
                      </td>
                      <td className="px-4 py-3">
                    <Controller
                          name="warehouseSpace"
                      control={control}
                      render={({ field }) => (
                        <input
                          {...field}
                          type="number"
                          min="0"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                          placeholder="0"
                        />
                      )}
                    />
                      </td>
                      <td className="px-4 py-3">
                        <Controller
                          name="warehouseDetails"
                          control={control}
                          render={({ field }) => (
                            <input
                              {...field}
                              type="text"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                              placeholder="Warehouse details"
                            />
                          )}
                        />
                      </td>
                    </tr>

                    {/* Truck/Mini Truck */}
                    <tr>
                      <td className="px-4 py-3 text-sm text-[#001011] absans">
                        Truck/mini truck
                      </td>
                      <td className="px-4 py-3">
                    <Controller
                      name="truckCount"
                      control={control}
                      render={({ field }) => (
                        <input
                          {...field}
                          type="number"
                          min="0"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                          placeholder="0"
                        />
                      )}
                    />
                      </td>
                      <td className="px-4 py-3">
                        <Controller
                          name="truckDetails"
                          control={control}
                          render={({ field }) => (
                            <input
                              {...field}
                              type="text"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                              placeholder="Truck details"
                            />
                          )}
                        />
                      </td>
                    </tr>

                    {/* Four Wheeler */}
                    <tr>
                      <td className="px-4 py-3 text-sm text-[#001011] absans">
                        Four wheeler
                      </td>
                      <td className="px-4 py-3">
                    <Controller
                      name="fourWheelerCount"
                      control={control}
                      render={({ field }) => (
                        <input
                          {...field}
                          type="number"
                          min="0"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                          placeholder="0"
                        />
                      )}
                    />
                      </td>
                      <td className="px-4 py-3">
                        <Controller
                          name="fourWheelerDetails"
                          control={control}
                          render={({ field }) => (
                            <input
                              {...field}
                              type="text"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                              placeholder="Four wheeler details"
                            />
                          )}
                        />
                      </td>
                    </tr>

                    {/* Two Wheeler */}
                    <tr>
                      <td className="px-4 py-3 text-sm text-[#001011] absans">
                        Two wheeler
                      </td>
                      <td className="px-4 py-3">
                    <Controller
                          name="twoWheelerCount"
                      control={control}
                      render={({ field }) => (
                        <input
                          {...field}
                          type="number"
                          min="0"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                          placeholder="0"
                        />
                      )}
                    />
                      </td>
                      <td className="px-4 py-3">
                        <Controller
                          name="twoWheelerDetails"
                          control={control}
                          render={({ field }) => (
                            <input
                              {...field}
                              type="text"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                              placeholder="Two wheeler details"
                            />
                          )}
                        />
                      </td>
                    </tr>

                    {/* Cycle */}
                    <tr>
                      <td className="px-4 py-3 text-sm text-[#001011] absans">
                        Cycle
                      </td>
                      <td className="px-4 py-3">
                    <Controller
                          name="cycleCount"
                      control={control}
                      render={({ field }) => (
                        <input
                          {...field}
                          type="number"
                          min="0"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                          placeholder="0"
                        />
                      )}
                    />
                      </td>
                      <td className="px-4 py-3">
                        <Controller
                          name="cycleDetails"
                          control={control}
                          render={({ field }) => (
                            <input
                              {...field}
                              type="text"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                              placeholder="Cycle details"
                            />
                          )}
                        />
                      </td>
                    </tr>

                    {/* Thela */}
                    <tr>
                      <td className="px-4 py-3 text-sm text-[#001011] absans">
                        Thela
                      </td>
                      <td className="px-4 py-3">
                    <Controller
                          name="thelaCount"
                      control={control}
                      render={({ field }) => (
                        <input
                          {...field}
                          type="number"
                          min="0"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                          placeholder="0"
                        />
                      )}
                    />
                      </td>
                      <td className="px-4 py-3">
                        <Controller
                          name="thelaDetails"
                          control={control}
                          render={({ field }) => (
                            <input
                              {...field}
                              type="text"
                              className="w-full px-4 py-2 border border-gray-300 rounded focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                              placeholder="Thela details"
                            />
                          )}
                        />
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-[#001011] mb-6 absans">‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§∞ ‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡•Ä</h3>
            
            
            {/* Products Section */}
            <div className="space-y-4">
              <h4 className="text-lg font-bold text-[#001011] absans">‡§µ‡§ø‡§§‡§∞‡§£ ‡§ó‡§∞‡•ç‡§®‡•á ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç</h4>
              
              {productFields.map((field, index) => (
                <div key={field.id} className="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 border border-gray-200 rounded-lg">
                  <div>
                    <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                      ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§ï‡•ã ‡§®‡§æ‡§Æ
                    </label>
                    <Controller
                      name={`products.${index}.name` as any}
                      control={control}
                      render={({ field }) => (
                        <select
                          {...field}
                          disabled={categoriesLoading}
                          className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                          <option value="">
                            {categoriesLoading ? '‡§≤‡•ã‡§° ‡§π‡•Å‡§Å‡§¶‡•à‡§õ...' : '‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç'}
                          </option>
                          {categories.length === 0 ? (
                            <option value="" disabled>
                              {categoriesLoading ? '‡§≤‡•ã‡§° ‡§π‡•Å‡§Å‡§¶‡•à‡§õ...' : '‡§ï‡•Å‡§®‡•à ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§õ‡•à‡§®'}
                            </option>
                          ) : (
                            categories.map((item) => (
                              <option 
                                key={item.id} 
                                value={item.type === 'category' ? item.title : ''}
                                disabled={item.type === 'subcategory'}
                                style={{
                                  fontWeight: item.type === 'category' ? 'bold' : 'normal',
                                  paddingLeft: item.type === 'subcategory' ? '20px' : '8px',
                                  color: item.type === 'subcategory' ? '#9CA3AF' : 'inherit',
                                  fontStyle: item.type === 'subcategory' ? 'italic' : 'normal'
                                }}
                              >
                                {item.type === 'subcategory' ? '  ‚îî ' : ''}{item.title}
                                {item.type === 'subcategory' ? ' (‡§∏‡§¨-‡§∂‡•ç‡§∞‡•á‡§£‡•Ä)' : ''}
                              </option>
                            ))
                          )}
                        </select>
                      )}
                    />
                    <p className="text-xs text-gray-600 mt-1 absans">
                      ‡§∏‡§¨-‡§∂‡•ç‡§∞‡•á‡§£‡•Ä‡§π‡§∞‡•Ç ‡§ï‡•á‡§µ‡§≤ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§¶‡•á‡§ñ‡§æ‡§á‡§è‡§ï‡§æ ‡§õ‡§®‡•ç‡•§ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§Æ‡§æ‡§§‡•ç‡§∞ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§
                    </p>
                    {errors.products?.[index]?.name && (
                      <p className="text-red-500 text-sm mt-1">{errors.products[index]?.name?.message}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                      ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ
                    </label>
                    <Controller
                      name={`products.${index}.monthlySalesCapacity` as any}
                      control={control}
                      render={({ field }) => (
                        <input
                          {...field}
                          type="text"
                          className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                          placeholder="‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ"
                        />
                      )}
                    />
                    {errors.products?.[index]?.monthlySalesCapacity && (
                      <p className="text-red-500 text-sm mt-1">{errors.products[index]?.monthlySalesCapacity?.message}</p>
                    )}
                  </div>

                  <div className="flex items-end">
                    {productFields.length > 2 && (
                      <button
                        type="button"
                        onClick={() => removeProduct(index)}
                        className="px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 text-sm absans"
                      >
                        ‡§π‡§ü‡§æ‡§â‡§®‡•Å‡§π‡•ã‡§∏‡•ç
                      </button>
                    )}
                  </div>
                </div>
              ))}

              <button
                type="button"
                onClick={() => appendProduct({ name: '', monthlySalesCapacity: '' })}
                className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 text-sm absans"
              >
                + ‡§®‡§Ø‡§æ‡§Å ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§•‡§™‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç
              </button>
            </div>

            {/* Partnership Details */}
            <div className="space-y-4">
              <h4 className="text-lg font-bold text-[#001011] absans">‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£ (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)</h4>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                    ‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ
                  </label>
                  <Controller
                    name="partnerFullName"
                    control={control}
                    render={({ field }) => (
                      <input
                        {...field}
                        type="text"
                        className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                        placeholder="‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§®‡§æ‡§Æ"
                      />
                    )}
                  />
                </div>

                <div>
                  <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                    ‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§â‡§Æ‡•á‡§∞
                  </label>
                  <Controller
                    name="partnerAge"
                    control={control}
                    render={({ field }) => (
                      <input
                        {...field}
                        type="number"
                        min="18"
                        className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                        placeholder="‡§â‡§Æ‡•á‡§∞"
                      />
                    )}
                  />
                </div>

                <div>
                  <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                    ‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Æ‡•ç‡§¨‡§∞
                  </label>
                  <Controller
                    name="partnerMobileNumber"
                    control={control}
                    render={({ field }) => (
                      <input
                        {...field}
                        type="tel"
                        className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                        placeholder="9xxxxxxxxx"
                      />
                    )}
                  />
                </div>

                <div>
                  <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                    ‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§á‡§Æ‡•á‡§≤
                  </label>
                  <Controller
                    name="partnerEmail"
                    control={control}
                    render={({ field }) => (
                      <input
                        {...field}
                        type="email"
                        className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                        placeholder="partner@email.com"
                      />
                    )}
                  />
                </div>
              
              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                    ‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞
                </label>
                <Controller
                    name="partnerCitizenshipNumber"
                  control={control}
                  render={({ field }) => (
                      <input
                      {...field}
                        type="text"
                      className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                        placeholder="‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞"
                    />
                  )}
                />
              </div>

              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                    ‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§ú‡§æ‡§∞‡•Ä ‡§ú‡§ø‡§≤‡•ç‡§≤‡§æ
                </label>
                <Controller
                    name="partnerIssuedDistrict"
                  control={control}
                  render={({ field }) => (
                      <select
                      {...field}
                      className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                      >
                        <option value="">‡§ú‡§ø‡§≤‡•ç‡§≤‡§æ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</option>
                        {nepalDistricts.map((district) => (
                          <option key={district} value={district}>
                            {district}
                          </option>
                        ))}
                      </select>
                    )}
                  />
                </div>
              </div>
            </div>
          </div>
        );

      case 5:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-[#001011] mb-6 absans">‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§∏‡§Ç‡§≤‡§ó‡•ç‡§®</h3>
            
            <div className="space-y-6">
              {/* Citizenship Certificate */}
              <div className="p-4 border border-gray-200 rounded-lg">
                <div className="flex items-center space-x-3 mb-3">
                  <Controller
                    name="citizenshipCertificate"
                    control={control}
                    render={({ field }) => (
                      <input
                        type="checkbox"
                        checked={field.value || false}
                        onChange={(e) => field.onChange(e.target.checked)}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      />
                    )}
                  />
                  <label className="text-sm font-bold text-[#001011] absans">
                    ‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§§‡§æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ * (‡§Ö‡§®‡§ø‡§µ‡§æ‡§∞‡•ç‡§Ø)
                  </label>
                </div>
                <div className="space-y-3">
                <Controller
                  name="citizenshipFile"
                  control={control}
                    rules={{ required: "‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§§‡§æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ" }}
                  render={({ field: { onChange, value, ...field } }) => (
                      <>
                    <input
                      {...field}
                      type="file"
                      accept=".pdf,.jpg,.jpeg,.png"
                      onChange={(e) => onChange(e.target.files?.[0])}
                      className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                    />
                        <div className="flex gap-2 flex-wrap">
                          <button
                            type="button"
                            onClick={() => {
                              const input = document.createElement('input');
                              input.type = 'file';
                              input.accept = 'image/*';
                              input.capture = 'camera';
                              input.onchange = (e) => {
                                const file = (e.target as HTMLInputElement).files?.[0];
                                if (file) {
                                  onChange(file);
                                }
                              };
                              input.click();
                            }}
                            className="px-3 py-2 border border-gray-300 text-black rounded-lg hover:bg-green-700 transition-colors text-sm absans flex items-center gap-1"
                          >
                            üì∑ ‡§ï‡•ç‡§Ø‡§æ‡§Æ‡•á‡§∞‡§æ
                          </button>
                          <button
                            type="button"
                            onClick={() => {
                              const input = document.createElement('input');
                              input.type = 'file';
                              input.accept = '.pdf,.jpg,.jpeg,.png';
                              input.onchange = (e) => {
                                const file = (e.target as HTMLInputElement).files?.[0];
                                if (file) {
                                  onChange(file);
                                }
                              };
                              input.click();
                            }}
                            className="px-3 py-2 border border-gray-300 text-black rounded-lg hover:bg-blue-700 transition-colors text-sm absans flex items-center gap-1"
                          >
                            üìÅ ‡§´‡§æ‡§á‡§≤ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç
                          </button>
                        </div>
                      </>
                    )}
                  />
                </div>
                {errors.citizenshipFile && (
                  <p className="text-red-500 text-sm mt-1">{errors.citizenshipFile.message}</p>
                )}
              </div>

              {/* Company Registration */}
              <div className="p-4 border border-gray-200 rounded-lg">
                <div className="flex items-center space-x-3 mb-3">
                  <Controller
                    name="companyRegistration"
                    control={control}
                    render={({ field }) => (
                      <input
                        type="checkbox"
                        checked={field.value || false}
                        onChange={(e) => field.onChange(e.target.checked)}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      />
                    )}
                  />
                  <label className="text-sm font-bold text-[#001011] absans">
                    ‡§ï‡§Æ‡•ç‡§™‡§®‡•Ä ‡§¶‡§∞‡•ç‡§§‡§æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ * (‡§Ö‡§®‡§ø‡§µ‡§æ‡§∞‡•ç‡§Ø)
                  </label>
                </div>
                <div className="space-y-3">
                <Controller
                  name="companyRegistrationFile"
                  control={control}
                    rules={{ required: "‡§ï‡§Æ‡•ç‡§™‡§®‡•Ä ‡§¶‡§∞‡•ç‡§§‡§æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ" }}
                  render={({ field: { onChange, value, ...field } }) => (
                      <>
                    <input
                      {...field}
                      type="file"
                      accept=".pdf,.jpg,.jpeg,.png"
                      onChange={(e) => onChange(e.target.files?.[0])}
                      className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                    />
                        <div className="flex gap-2 flex-wrap">
                          <button
                            type="button"
                            onClick={() => {
                              const input = document.createElement('input');
                              input.type = 'file';
                              input.accept = 'image/*';
                              input.capture = 'camera';
                              input.onchange = (e) => {
                                const file = (e.target as HTMLInputElement).files?.[0];
                                if (file) {
                                  onChange(file);
                                }
                              };
                              input.click();
                            }}
                            className="px-3 py-2 border border-gray-300 text-black rounded-lg hover:bg-green-700 transition-colors text-sm absans flex items-center gap-1"
                          >
                            üì∑ ‡§ï‡•ç‡§Ø‡§æ‡§Æ‡•á‡§∞‡§æ
                          </button>
                          <button
                            type="button"
                            onClick={() => {
                              const input = document.createElement('input');
                              input.type = 'file';
                              input.accept = '.pdf,.jpg,.jpeg,.png';
                              input.onchange = (e) => {
                                const file = (e.target as HTMLInputElement).files?.[0];
                                if (file) {
                                  onChange(file);
                                }
                              };
                              input.click();
                            }}
                            className="px-3 py-2 border border-gray-300 text-black rounded-lg hover:bg-blue-700 transition-colors text-sm absans flex items-center gap-1"
                          >
                            üìÅ ‡§´‡§æ‡§á‡§≤ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç
                          </button>
                        </div>
                      </>
                    )}
                  />
                </div>
                {errors.companyRegistrationFile && (
                  <p className="text-red-500 text-sm mt-1">{errors.companyRegistrationFile.message}</p>
                )}
              </div>

              {/* PAN/VAT */}
              <div className="p-4 border border-gray-200 rounded-lg">
                <div className="flex items-center space-x-3 mb-3">
                  <Controller
                    name="panVat"
                    control={control}
                    render={({ field }) => (
                      <input
                        type="checkbox"
                        checked={field.value || false}
                        onChange={(e) => field.onChange(e.target.checked)}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      />
                    )}
                  />
                  <label className="text-sm font-bold text-[#001011] absans">
                    PAN/VAT ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ * (‡§Ö‡§®‡§ø‡§µ‡§æ‡§∞‡•ç‡§Ø)
                  </label>
                </div>
                <div className="space-y-3">
                <Controller
                  name="panVatFile"
                  control={control}
                    rules={{ required: "PAN/VAT ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ" }}
                  render={({ field: { onChange, value, ...field } }) => (
                      <>
                    <input
                      {...field}
                      type="file"
                      accept=".pdf,.jpg,.jpeg,.png"
                      onChange={(e) => onChange(e.target.files?.[0])}
                      className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                    />
                        <div className="flex gap-2 flex-wrap">
                          <button
                            type="button"
                            onClick={() => {
                              const input = document.createElement('input');
                              input.type = 'file';
                              input.accept = 'image/*';
                              input.capture = 'camera';
                              input.onchange = (e) => {
                                const file = (e.target as HTMLInputElement).files?.[0];
                                if (file) {
                                  onChange(file);
                                }
                              };
                              input.click();
                            }}
                            className="px-3 py-2 border border-gray-300 text-black rounded-lg hover:bg-green-700 transition-colors text-sm absans flex items-center gap-1"
                          >
                            üì∑ ‡§ï‡•ç‡§Ø‡§æ‡§Æ‡•á‡§∞‡§æ
                          </button>
                          <button
                            type="button"
                            onClick={() => {
                              const input = document.createElement('input');
                              input.type = 'file';
                              input.accept = '.pdf,.jpg,.jpeg,.png';
                              input.onchange = (e) => {
                                const file = (e.target as HTMLInputElement).files?.[0];
                                if (file) {
                                  onChange(file);
                                }
                              };
                              input.click();
                            }}
                            className="px-3 py-2 border border-gray-300 text-black rounded-lg hover:bg-blue-700 transition-colors text-sm absans flex items-center gap-1"
                          >
                            üìÅ ‡§´‡§æ‡§á‡§≤ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç
                          </button>
                        </div>
                      </>
                    )}
                  />
                </div>
                {errors.panVatFile && (
                  <p className="text-red-500 text-sm mt-1">{errors.panVatFile.message}</p>
                )}
              </div>

              {/* Office Photo */}
              <div className="p-4 border border-gray-200 rounded-lg">
                <div className="flex items-center space-x-3 mb-3">
                  <Controller
                    name="officePhoto"
                    control={control}
                    render={({ field }) => (
                      <input
                        type="checkbox"
                        checked={field.value || false}
                        onChange={(e) => field.onChange(e.target.checked)}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      />
                    )}
                  />
                  <label className="text-sm font-bold text-[#001011] absans">
                    ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø‡§ï‡•ã ‡§´‡•ã‡§ü‡•ã
                  </label>
                </div>
                <Controller
                  name="officePhotoFile"
                  control={control}
                  render={({ field: { onChange, value, ...field } }) => (
                    <input
                      {...field}
                      type="file"
                      accept=".jpg,.jpeg,.png"
                      onChange={(e) => onChange(e.target.files?.[0])}
                      className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                    />
                  )}
                />
              </div>

              {/* Other Documents */}
              <div className="p-4 border border-gray-200 rounded-lg">
                <div className="flex items-center space-x-3 mb-3">
                  <Controller
                    name="otherDocuments"
                    control={control}
                    render={({ field }) => (
                      <input
                        type="checkbox"
                        checked={field.value || false}
                        onChange={(e) => field.onChange(e.target.checked)}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      />
                    )}
                  />
                  <label className="text-sm font-bold text-[#001011] absans">
                    ‡§Ö‡§®‡•ç‡§Ø ‡§ï‡§æ‡§ó‡§ú‡§æ‡§§‡§π‡§∞‡•Ç
                  </label>
                </div>
                <Controller
                  name="otherDocumentsFile"
                  control={control}
                  render={({ field: { onChange, value, ...field } }) => (
                    <input
                      {...field}
                      type="file"
                      accept=".pdf,.jpg,.jpeg,.png"
                      multiple
                      onChange={(e) => onChange(e.target.files)}
                      className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                    />
                  )}
                />
              </div>
            </div>
          </div>
        );

      case 6:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-[#001011] mb-6 absans">‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                  ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡•ß
                </label>
                <Controller
                  name="additionalInfo"
                  control={control}
                  render={({ field }) => (
                    <textarea
                      {...field}
                      rows={3}
                      className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                      placeholder="‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡•á‡§ñ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç..."
                    />
                  )}
                />
              </div>

              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                  ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡•®
                </label>
                <Controller
                  name="additionalInfo2"
                  control={control}
                  render={({ field }) => (
                    <textarea
                      {...field}
                      rows={3}
                      className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                      placeholder="‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡•á‡§ñ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç..."
                    />
                  )}
                />
              </div>

              <div>
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                  ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡•©
                </label>
                <Controller
                  name="additionalInfo3"
                  control={control}
                  render={({ field }) => (
                    <textarea
                      {...field}
                      rows={3}
                      className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                      placeholder="‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡•á‡§ñ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç..."
                    />
                  )}
                />
              </div>
            </div>
          </div>
        );

      case 7:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-[#001011] mb-6 absans">‡§®‡§ø‡§Ø‡§Æ ‡§∞ ‡§∏‡§π‡§Æ‡§§‡§ø (Terms & Agreement)</h3>
            
            <div className="bg-gray-50 p-6 rounded-lg space-y-4">
              <h4 className="text-lg font-semibold text-[#001011] absans">‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∂‡§∞‡•ç‡§§‡§π‡§∞‡•Ç (Main Terms & Conditions):</h4>
              
              <div className="space-y-3 text-sm text-[#001011] absans">
                <p>1. ‡§µ‡§ø‡§§‡§∞‡§ï‡§≤‡•á ‡§µ‡§ø‡§§‡§∞‡§£ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§≠‡§ø‡§§‡•ç‡§∞ ‡§Æ‡§æ‡§§‡•ç‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§® ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§ó‡§∞‡•ç‡§® ‡§™‡§æ‡§â‡§®‡•á‡§õ‡•§</p>
                <p>2. ‡§∏‡§¨‡•à ‡§¨‡§ï‡•ç‡§Ø‡•å‡§§‡§æ ‡•©‡•¶ ‡§¶‡§ø‡§®‡§≠‡§ø‡§§‡•ç‡§∞ ‡§ö‡•Å‡§ï‡•ç‡§§‡§æ ‡§ó‡§∞‡•ç‡§®‡•Å ‡§™‡§∞‡•ç‡§®‡•á‡§õ‡•§</p>
                <p>3. ‡§ï‡§Æ‡•ç‡§™‡§®‡•Ä‡§ï‡•ã ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§∏‡•Ç‡§ö‡•Ä ‡§∞ ‡§∏‡•ç‡§ï‡§ø‡§Æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§®‡•à ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§ó‡§∞‡•ç‡§®‡•Å‡§™‡§∞‡•ç‡§®‡•á‡§õ‡•§</p>
                <p>4. ‡§∏‡§Æ‡§Ø‡§Æ‡•à ‡§Ö‡§∞‡•ç‡§°‡§∞ ‡§∞ ‡§°‡•á‡§≤‡§ø‡§≠‡§∞‡•Ä ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ó‡§∞‡•ç‡§®‡•Å‡§™‡§∞‡•ç‡§®‡•á‡§õ‡•§</p>
                <p>5. ‡§®‡§µ‡•Ä‡§ï‡§∞‡§£ ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§µ‡§∞‡•ç‡§∑ ‡§ó‡§∞‡§ø‡§®‡•Å‡§™‡§∞‡•ç‡§®‡•á‡§õ‡•§</p>
                <p>6. ‡§ï‡§Æ‡•ç‡§™‡§®‡•Ä‡§ï‡•ã ‡§¨‡•ç‡§∞‡§æ‡§®‡•ç‡§° ‡§®‡§æ‡§Æ, ‡§≤‡•ã‡§ó‡•ã, ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä‡§π‡§∞‡•Ç‡§ï‡•ã ‡§¶‡•Å‡§∞‡•Å‡§™‡§Ø‡•ã‡§ó ‡§ó‡§∞‡•ç‡§®‡•á ‡§™‡§æ‡§â‡§®‡•á ‡§õ‡•à‡§®‡•§</p>
                <p>7. ‡§ï‡•Å‡§®‡•à ‡§µ‡§ø‡§µ‡§æ‡§¶ ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§≠‡§è‡§Æ‡§æ ‡§ï‡§Æ‡•ç‡§™‡§®‡•Ä‡§ï‡•ã ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø‡§ï‡•ã ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø ‡§Ö‡§®‡•ç‡§§‡§ø‡§Æ ‡§π‡•Å‡§®‡•á‡§õ‡•§</p>
              </div>
            </div>

            <div className="bg-gray-50 p-6 rounded-lg space-y-4">
              <h4 className="text-lg font-semibold text-[#001011] absans">‡•Æ. ‡§∏‡§π‡§Æ‡§§‡§ø (Agreement & Terms)</h4>
              
              <div className="space-y-3 text-sm text-[#001011] absans">
                <p>‡§Æ/‡§π‡§æ‡§Æ‡•Ä ‡§Æ‡§æ‡§•‡§ø ‡§â‡§≤‡•ç‡§≤‡•á‡§ñ‡§ø‡§§ ‡§∏‡§¨‡•à ‡§µ‡§ø‡§µ‡§∞‡§£‡§π‡§∞‡•Ç ‡§∏‡§§‡•ç‡§Ø ‡§∞ ‡§Ø‡§•‡§æ‡§∞‡•ç‡§• ‡§õ‡§®‡•ç ‡§≠‡§®‡•Ä ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§ø‡§§ ‡§ó‡§∞‡•ç‡§¶‡§õ‡•Å/‡§ó‡§õ‡•å‡§Å‡•§</p>
                <p>Celebrate Multi Industries Pvt. Ltd. ‡§ï‡•ã ‡§®‡§ø‡§Ø‡§Æ ‡§∞ ‡§∂‡§∞‡•ç‡§§‡§π‡§∞‡•Ç ‡§™‡§æ‡§≤‡§®‡§æ ‡§ó‡§∞‡•ç‡§®‡•á‡§õ‡•Å/‡§ó‡§õ‡•å‡•§</p>
              </div>
            </div>

            {/* Agreement Checkbox */}
            <div className="mb-6">
              <div className="flex items-start space-x-3 p-4 border-2 border-blue-200 rounded-lg bg-blue-50">
                <Controller
                  name="agreementAccepted"
                  control={control}
                  rules={{ required: "‡§∏‡§π‡§Æ‡§§‡§ø ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç" }}
                  render={({ field }) => (
                    <input
                      type="checkbox"
                      checked={field.value || false}
                      onChange={(e) => field.onChange(e.target.checked)}
                      className="mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                  )}
                />
                <div className="flex-1">
                  <label className="text-sm font-medium text-blue-900 absans">
                    ‡§Æ/‡§π‡§æ‡§Æ‡•Ä ‡§Æ‡§æ‡§•‡§ø ‡§â‡§≤‡•ç‡§≤‡•á‡§ñ‡§ø‡§§ ‡§∏‡§¨‡•à ‡§®‡§ø‡§Ø‡§Æ ‡§∞ ‡§∂‡§∞‡•ç‡§§‡§π‡§∞‡•Ç ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ó‡§∞‡•ç‡§¶‡§õ‡•Å/‡§ó‡§∞‡•ç‡§¶‡§õ‡•å‡§Ç‡•§ *
                  </label>
                  <p className="text-xs text-blue-700 mt-1">
                    I/We accept all the terms and conditions mentioned above. *
                  </p>
                  {errors.agreementAccepted && (
                    <p className="text-red-500 text-sm mt-1">{errors.agreementAccepted.message}</p>
                  )}
                </div>
              </div>
            </div>

            {/* Signature Section */}
            <div className="bg-white border border-gray-200 rounded-lg p-6 space-y-4">
              <h4 className="text-lg font-semibold text-[#001011] absans">‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞ ‡§∞ ‡§µ‡§ø‡§µ‡§∞‡§£ (Signature & Details)</h4>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                    ‡§µ‡§ø‡§§‡§∞‡§ï‡§ï‡•ã ‡§®‡§æ‡§Æ (Distributor Name) *
                  </label>
                  <Controller
                    name="distributorSignatureName"
                    control={control}
                    rules={{ required: "‡§®‡§æ‡§Æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ" }}
                    render={({ field }) => (
                      <input
                        {...field}
                        type="text"
                        className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans"
                        placeholder="Enter your full name"
                      />
                    )}
                  />
                  {errors.distributorSignatureName && (
                    <p className="text-red-500 text-sm mt-1">{errors.distributorSignatureName.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                    ‡§Æ‡§ø‡§§‡§ø (Date) *
                  </label>
                  <Controller
                    name="distributorSignatureDate"
                    control={control}
                    rules={{ required: "‡§Æ‡§ø‡§§‡§ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§õ" }}
                    render={({ field }) => (
                      <input
                        {...field}
                        type="text"
                        readOnly
                        className="w-full px-6 py-4 border border-gray-300 rounded-lg focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none text-[#001011] placeholder-[#001011] absans bg-gray-50 cursor-not-allowed"
                        placeholder="‡§Ü‡§ú‡§ï‡•ã ‡§Æ‡§ø‡§§‡§ø"
                      />
                    )}
                  />
                  <p className="text-xs text-gray-600 mt-1 absans">
                    ‡§Ü‡§ú‡§ï‡•ã ‡§®‡•á‡§™‡§æ‡§≤‡•Ä ‡§Æ‡§ø‡§§‡§ø ‡§∏‡•ç‡§µ‡§§‡§É ‡§≠‡§∞‡§ø‡§è‡§ï‡•ã ‡§õ (Today's Nepali date is auto-filled)
                  </p>
                  {errors.distributorSignatureDate && (
                    <p className="text-red-500 text-sm mt-1">{errors.distributorSignatureDate.message}</p>
                  )}
                </div>
              </div>

              <div className="mt-4">
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                  ‡§µ‡§ø‡§§‡§∞‡§ï‡§ï‡•ã ‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞‡§É (Distributor's Signature:)
                </label>
                <div className="border-2 border-gray-300 rounded-lg p-4 bg-white">
                  <canvas
                    ref={canvasRef}
                    width={800}
                    height={400}
                    className="border border-gray-200 rounded cursor-crosshair w-full max-w-4xl mx-auto"
                    style={{ touchAction: 'none' }}
                    onMouseDown={startDrawing}
                    onMouseMove={draw}
                    onMouseUp={stopDrawing}
                    onMouseLeave={stopDrawing}
                    onTouchStart={startDrawing}
                    onTouchMove={draw}
                    onTouchEnd={stopDrawing}
                  />
                  <div className="flex gap-2 mt-3 justify-center">
                    <button
                      type="button"
                      onClick={clearSignature}
                      className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-sm absans"
                    >
                      ‡§∏‡§´‡§æ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç (Clear)
                    </button>
                    {signature && (
                      <div className="text-green-600 text-sm flex items-center gap-1">
                        ‚úì ‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞ ‡§≠‡§Ø‡•ã (Signature Captured)
                      </div>
                    )}
                  </div>
                </div>
              </div>

              <div className="mt-4">
                <label className="block text-sm font-bold text-[#001011] mb-2 absans">
                  ‡§õ‡§æ‡§™ (Stamp)
                </label>
                <div className="border-2 border-dashed border-gray-300 h-16 flex items-center justify-center">
                  <span className="text-[#001011] text-sm absans">[Stamp area]</span>
                </div>
              </div>
            </div>
          </div>
        );

      case 8:
        return (
          <div className="space-y-8">
            <div className="text-center">
              <h3 className="text-2xl font-bold text-[#001011] mb-2 absans">‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ (Review)</h3>
              <p className="text-[#001011] absans">
                ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡§™‡§æ‡§à‡§Ç‡§≤‡•á ‡§≠‡§∞‡•á‡§ï‡§æ ‡§∏‡§¨‡•à ‡§µ‡§ø‡§µ‡§∞‡§£‡§π‡§∞‡•Ç ‡§ú‡§æ‡§Å‡§ö ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§ ‡§Ø‡§¶‡§ø ‡§ï‡•Å‡§®‡•à ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§® ‡§ö‡§æ‡§π‡§ø‡§®‡•ç‡§õ ‡§≠‡§®‡•á, ‡§™‡§õ‡§æ‡§°‡§ø ‡§ú‡§æ‡§®‡•Å‡§π‡•ã‡§∏‡•ç ‡§∞ ‡§∏‡§Æ‡•ç‡§™‡§æ‡§¶‡§® ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§
              </p>
              <p className="text-sm text-[#001011] mt-1">
                Please review all the details you have entered. If any changes are needed, go back and edit.
              </p>
            </div>
            
            <div className="space-y-8">
              {/* Step 1: Personal Details */}
              <div className="bg-white border border-gray-200 rounded-xl p-6 shadow-sm">
                <h4 className="text-xl font-semibold text-[#001011] mb-6 pb-3 border-b border-gray-200 absans">
                  ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£ (Personal Details)
                </h4>
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div className="relative">
                      <input
                        type="text"
                        value={getCurrentFormData().fullName || ''}
                        disabled
                        className="w-full px-4 pt-6 pb-2 bg-gray-50 border border-gray-200 rounded-lg text-[#001011] cursor-not-allowed absans focus:outline-none focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none"
                        placeholder=" "
                      />
                      <label className="absolute left-4 -top-1 bg-gray-50 px-1 text-xs font-bold text-[#001011] transition-all duration-200 pointer-events-none absans">
                        ‡§®‡§æ‡§Æ (Full Name)
                      </label>
                    </div>
                    <div className="relative">
                      <input
                        type="text"
                        value={getCurrentFormData().age || ''}
                        disabled
                        className="w-full px-4 pt-6 pb-2 bg-gray-50 border border-gray-200 rounded-lg text-[#001011] cursor-not-allowed absans focus:outline-none focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none"
                        placeholder=" "
                      />
                      <label className="absolute left-4 -top-1 bg-gray-50 px-1 text-xs font-bold text-[#001011] transition-all duration-200 pointer-events-none absans">
                        ‡§â‡§Æ‡•á‡§∞ (Age)
                      </label>
                    </div>
                    <div className="relative">
                      <input
                        type="text"
                        value={getCurrentFormData().gender || ''}
                        disabled
                        className="w-full px-4 pt-6 pb-2 bg-gray-50 border border-gray-200 rounded-lg text-[#001011] cursor-not-allowed absans focus:outline-none focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none"
                        placeholder=" "
                      />
                      <label className="absolute left-4 -top-1 bg-gray-50 px-1 text-xs font-bold text-[#001011] transition-all duration-200 pointer-events-none absans">
                        ‡§≤‡§ø‡§ô‡•ç‡§ó (Gender)
                      </label>
                    </div>
                    <div className="relative">
                      <input
                        type="text"
                        value={getCurrentFormData().citizenshipNumber || ''}
                        disabled
                        className="w-full px-4 pt-6 pb-2 bg-gray-50 border border-gray-200 rounded-lg text-[#001011] cursor-not-allowed absans focus:outline-none focus:ring-0 focus:border-gray-400 focus:bg-gray-100 focus:outline-none"
                        placeholder=" "
                      />
                      <label className="absolute left-4 -top-1 bg-gray-50 px-1 text-xs font-bold text-[#001011] transition-all duration-200 pointer-events-none absans">
                        ‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞ (Citizenship Number)
                      </label>
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-[#001011] mb-2 absans">‡§ú‡§æ‡§∞‡•Ä ‡§ú‡§ø‡§≤‡•ç‡§≤‡§æ (Issued District)</label>
                      <input
                        type="text"
                        value={getCurrentFormData().issuedDistrict || ''}
                        disabled
                        className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg text-[#001011] cursor-not-allowed absans"
                      />
                    </div>
                  </div>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-bold text-[#001011] mb-2 absans">‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ (Mobile)</label>
                      <input
                        type="text"
                        value={getCurrentFormData().mobileNumber || ''}
                        disabled
                        className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg text-[#001011] cursor-not-allowed absans"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-[#001011] mb-2 absans">‡§á‡§Æ‡•á‡§≤ (Email)</label>
                      <input
                        type="text"
                        value={getCurrentFormData().email || ''}
                        disabled
                        className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg text-[#001011] cursor-not-allowed absans"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-[#001011] mb-2 absans">‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§†‡•á‡§ó‡§æ‡§®‡§æ (Permanent Address)</label>
                      <input
                        type="text"
                        value={getCurrentFormData().permanentAddress || ''}
                        disabled
                        className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg text-[#001011] cursor-not-allowed absans"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-[#001011] mb-2 absans">‡§Ö‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§†‡•á‡§ó‡§æ‡§®‡§æ (Temporary Address)</label>
                      <input
                        type="text"
                        value={getCurrentFormData().temporaryAddress || ''}
                        disabled
                        className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg text-[#001011] cursor-not-allowed absans"
                      />
                    </div>
                  </div>
                </div>
              </div>

              {/* Step 2: Business Details */}
              <div className="bg-white border border-gray-200 rounded-xl p-6 shadow-sm">
                <h4 className="text-xl font-semibold text-[#001011] mb-6 pb-3 border-b border-gray-200 absans">
                  ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡§ø‡§ï ‡§µ‡§ø‡§µ‡§∞‡§£ (Business Details)
                </h4>
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-bold text-[#001011] mb-2 absans">‡§ï‡§Æ‡•ç‡§™‡§®‡•Ä‡§ï‡•ã ‡§®‡§æ‡§Æ (Company Name)</label>
                      <input
                        type="text"
                        value={getCurrentFormData().companyName || ''}
                        disabled
                        className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg text-[#001011] cursor-not-allowed absans"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-[#001011] mb-2 absans">‡§¶‡§∞‡•ç‡§§‡§æ ‡§®‡§Æ‡•ç‡§¨‡§∞ (Registration Number)</label>
                      <input
                        type="text"
                        value={getCurrentFormData().registrationNumber || ''}
                        disabled
                        className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg text-[#001011] cursor-not-allowed absans"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-[#001011] mb-2 absans">PAN/VAT ‡§®‡§Æ‡•ç‡§¨‡§∞ (PAN/VAT Number)</label>
                      <input
                        type="text"
                        value={getCurrentFormData().panVatNumber || ''}
                        disabled
                        className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg text-[#001011] cursor-not-allowed absans"
                      />
                    </div>
                  </div>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-bold text-[#001011] mb-2 absans">‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø‡§ï‡•ã ‡§†‡•á‡§ó‡§æ‡§®‡§æ (Office Address)</label>
                      <input
                        type="text"
                        value={getCurrentFormData().officeAddress || ''}
                        disabled
                        className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg text-[#001011] cursor-not-allowed absans"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-[#001011] mb-2 absans">‡§ï‡§æ‡§Æ ‡§ó‡§∞‡•ç‡§®‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (Work Area District)</label>
                      <input
                        type="text"
                        value={getCurrentFormData().workAreaDistrict || ''}
                        disabled
                        className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg text-[#001011] cursor-not-allowed absans"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-[#001011] mb-2 absans">‡§µ‡§ø‡§§‡§∞‡§ï ‡§¨‡§®‡•ç‡§® ‡§ö‡§æ‡§π‡§®‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (Desired Distribution Area)</label>
                      <input
                        type="text"
                        value={getCurrentFormData().desiredDistributionArea || ''}
                        disabled
                        className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg text-[#001011] cursor-not-allowed absans"
                      />
                    </div>
                  </div>
                </div>
                
                {/* Current Business Details */}
                {getCurrentFormData().currentBusiness && getCurrentFormData().currentBusiness.length > 0 && (
                  <div className="mt-4">
                    <h5 className="font-bold text-[#001011] mb-2 absans">‡§π‡§æ‡§≤‡§ï‡•ã ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£ (Current Business Details):</h5>
                    {getCurrentFormData().currentBusiness.map((business: any, index: number) => (
                      <div key={index} className="bg-gray-50 p-3 rounded mb-2 text-sm text-[#001011]">
                        <div><strong>‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡§ï‡•ã ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ (Business Type):</strong> {business.businessType || 'N/A'}</div>
                        <div><strong>‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç (Products):</strong> {business.products || 'N/A'}</div>
                        <div><strong>‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§ü‡§∞‡•ç‡§®‡§ì‡§≠‡§∞ (Annual Turnover):</strong> {business.turnover || 'N/A'}</div>
                      </div>
                    ))}
                  </div>
                )}
              </div>

              {/* Step 3: Staff & Infrastructure */}
              <div className="bg-white border border-gray-200 rounded-lg p-6">
                <h4 className="text-lg font-semibold text-[#001011] mb-4 absans">‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä ‡§∞ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§ß‡§æ‡§∞ (Staff & Infrastructure)</h4>
                <div className="space-y-3 text-sm text-[#001011]">
                  <div><strong>‡§∏‡•á‡§≤‡•ç‡§∏ ‡§Æ‡•ç‡§Ø‡§æ‡§® (Sales Man):</strong> {getCurrentFormData().salesManCount || '0'} - {getCurrentFormData().salesManExperience || 'No experience details'}</div>
                  <div><strong>‡§°‡•á‡§≤‡§ø‡§≠‡§∞‡•Ä ‡§∏‡•ç‡§ü‡§æ‡§´ (Delivery Staff):</strong> {getCurrentFormData().deliveryStaffCount || '0'} - {getCurrentFormData().deliveryStaffExperience || 'No experience details'}</div>
                  <div><strong>‡§≤‡•á‡§ñ‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï (Account Assistant):</strong> {getCurrentFormData().accountAssistantCount || '0'} - {getCurrentFormData().accountAssistantExperience || 'No experience details'}</div>
                  <div><strong>‡§Ö‡§®‡•ç‡§Ø (Other Staff):</strong> {getCurrentFormData().otherStaffCount || '0'} - {getCurrentFormData().otherStaffExperience || 'No details'}</div>
                  <div><strong>‡§ó‡•ã‡§¶‡§æ‡§Æ ‡§∏‡•ç‡§•‡§æ‡§® (Warehouse Space):</strong> {getCurrentFormData().warehouseSpace || '0'} Sq.Ft. - {getCurrentFormData().warehouseDetails || 'No details'}</div>
                  <div><strong>Truck/Mini Truck:</strong> {getCurrentFormData().truckCount || '0'} - {getCurrentFormData().truckDetails || 'No details'}</div>
                  <div><strong>Four Wheeler:</strong> {getCurrentFormData().fourWheelerCount || '0'} - {getCurrentFormData().fourWheelerDetails || 'No details'}</div>
                  <div><strong>Two Wheeler:</strong> {getCurrentFormData().twoWheelerCount || '0'} - {getCurrentFormData().twoWheelerDetails || 'No details'}</div>
                  <div><strong>Cycle:</strong> {getCurrentFormData().cycleCount || '0'} - {getCurrentFormData().cycleDetails || 'No details'}</div>
                  <div><strong>Thela:</strong> {getCurrentFormData().thelaCount || '0'} - {getCurrentFormData().thelaDetails || 'No details'}</div>
                </div>
              </div>

              {/* Step 4: Products & Partnership */}
              <div className="bg-white border border-gray-200 rounded-lg p-6">
                <h4 className="text-lg font-semibold text-[#001011] mb-4 absans">‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§∞ ‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡•Ä (Products & Partnership)</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-[#001011]">
                  <div><strong>‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä (Product Category):</strong> {getCurrentFormData().productCategory || 'N/A'}</div>
                  <div><strong>‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞ ‡§Ö‡§®‡•Å‡§≠‡§µ (Business Experience):</strong> {getCurrentFormData().businessExperience || 'N/A'} ‡§µ‡§∞‡•ç‡§∑</div>
                  <div><strong>‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä (Monthly Income):</strong> {getCurrentFormData().monthlyIncome || 'N/A'}</div>
                  <div><strong>‡§≠‡•Å‡§ï‡•ç‡§§‡§æ‡§®‡•Ä ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ (Payment Preference):</strong> {getCurrentFormData().paymentPreference || 'N/A'}</div>
                </div>
                
                {/* Partnership Details */}
                {getCurrentFormData().partnerFullName && (
                  <div className="mt-4">
                    <h5 className="font-bold text-[#001011] mb-2 absans">‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£ (Partnership Details):</h5>
                    <div className="bg-gray-50 p-3 rounded text-sm text-[#001011]">
                      <div><strong>‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§®‡§æ‡§Æ (Partner Name):</strong> {getCurrentFormData().partnerFullName}</div>
                      <div><strong>‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§â‡§Æ‡•á‡§∞ (Partner Age):</strong> {getCurrentFormData().partnerAge}</div>
                      <div><strong>‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡§ï‡•ã ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ (Partner Mobile):</strong> {getCurrentFormData().partnerMobileNumber}</div>
                    </div>
                  </div>
                )}
              </div>

              {/* Step 5: Document Upload */}
              <div className="bg-white border border-gray-200 rounded-xl p-6 shadow-sm">
                <h4 className="text-xl font-semibold text-[#001011] mb-6 pb-3 border-b border-gray-200 absans">
                  ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§∏‡§Ç‡§≤‡§ó‡•ç‡§® (Document Upload)
                </h4>
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <div className="space-y-6">
                    <div>
                      <label className="block text-sm font-bold text-[#001011] mb-3 absans">‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§§‡§æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ (Citizenship Certificate)</label>
                      {getCurrentFormData().citizenshipFile ? (
                        <div className="space-y-3">
                          <div className="flex items-center space-x-3">
                            <div className="px-3 py-2 rounded-full text-sm font-medium bg-green-100 text-green-800">
                              Uploaded
                            </div>
                            <button
                              type="button"
                              onClick={() => window.open(URL.createObjectURL(getCurrentFormData().citizenshipFile), '_blank')}
                              className="px-3 py-1 bg-blue-100 text-blue-800 rounded text-sm hover:bg-blue-200 transition-colors"
                            >
                              Open Full Size
                            </button>
                          </div>
                          <div className="border border-gray-200 rounded-lg p-2 bg-gray-50">
                            <img
                              src={URL.createObjectURL(getCurrentFormData().citizenshipFile)}
                              alt="Citizenship Certificate"
                              className="w-full h-48 object-contain rounded"
                            />
                          </div>
                        </div>
                      ) : (
                        <div className="flex items-center space-x-3">
                          <div className="px-3 py-2 rounded-full text-sm font-medium bg-red-100 text-red-800">
                             Not uploaded
                          </div>
                        </div>
                      )}
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-[#001011] mb-3 absans">‡§ï‡§Æ‡•ç‡§™‡§®‡•Ä ‡§¶‡§∞‡•ç‡§§‡§æ (Company Registration)</label>
                      {getCurrentFormData().companyRegistrationFile ? (
                        <div className="space-y-3">
                          <div className="flex items-center space-x-3">
                            <div className="px-3 py-2 rounded-full text-sm font-medium bg-green-100 text-green-800">
                              Uploaded
                            </div>
                            <button
                              type="button"
                              onClick={() => window.open(URL.createObjectURL(getCurrentFormData().companyRegistrationFile), '_blank')}
                              className="px-3 py-1 bg-blue-100 text-blue-800 rounded text-sm hover:bg-blue-200 transition-colors"
                            >
                              Preview
                            </button>
                          </div>
                          <div className="border border-gray-200 rounded-lg p-2 bg-gray-50">
                            <img
                              src={URL.createObjectURL(getCurrentFormData().companyRegistrationFile)}
                              alt="Company Registration"
                              className="w-full h-48 object-contain rounded"
                            />
                          </div>
                        </div>
                      ) : (
                        <div className="flex items-center space-x-3">
                          <div className="px-3 py-2 rounded-full text-sm font-medium bg-red-100 text-red-800">
                            Not uploaded
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                  <div className="space-y-6">
                    <div>
                      <label className="block text-sm font-bold text-[#001011] mb-3 absans">PAN/VAT ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ (PAN/VAT Certificate)</label>
                      {getCurrentFormData().panVatFile ? (
                        <div className="space-y-3">
                          <div className="flex items-center space-x-3">
                            <div className="px-3 py-2 rounded-full text-sm font-medium bg-green-100 text-green-800">
                               Uploaded
                            </div>
                            <button
                              type="button"
                              onClick={() => window.open(URL.createObjectURL(getCurrentFormData().panVatFile), '_blank')}
                              className="px-3 py-1 bg-blue-100 text-blue-800 rounded text-sm hover:bg-blue-200 transition-colors"
                            >
                             Preview
                            </button>
                          </div>
                          <div className="border border-gray-200 rounded-lg p-2 bg-gray-50">
                            <img
                              src={URL.createObjectURL(getCurrentFormData().panVatFile)}
                              alt="PAN/VAT Certificate"
                              className="w-full h-48 object-contain rounded"
                            />
                          </div>
                        </div>
                      ) : (
                        <div className="flex items-center space-x-3">
                          <div className="px-3 py-2 rounded-full text-sm font-medium bg-red-100 text-red-800">
                             Not uploaded
                          </div>
                        </div>
                      )}
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-[#001011] mb-3 absans">‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø‡§ï‡•ã ‡§´‡•ã‡§ü‡•ã (Office Photo)</label>
                      {getCurrentFormData().officePhotoFile ? (
                        <div className="space-y-3">
                          <div className="flex items-center space-x-3">
                            <div className="px-3 py-2 rounded-full text-sm font-medium bg-green-100 text-green-800">
                              Uploaded
                            </div>
                            <button
                              type="button"
                              onClick={() => window.open(URL.createObjectURL(getCurrentFormData().officePhotoFile), '_blank')}
                              className="px-3 py-1 bg-blue-100 text-blue-800 rounded text-sm hover:bg-blue-200 transition-colors"
                            >
                              Preview
                            </button>
                          </div>
                          <div className="border border-gray-200 rounded-lg p-2 bg-gray-50">
                            <img
                              src={URL.createObjectURL(getCurrentFormData().officePhotoFile)}
                              alt="Office Photo"
                              className="w-full h-48 object-contain rounded"
                            />
                          </div>
                        </div>
                      ) : (
                        <div className="flex items-center space-x-3">
                          <div className="px-3 py-2 rounded-full text-sm font-medium bg-red-100 text-red-800">
                             Not uploaded
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>

              {/* Step 6: Additional Information */}
              <div className="bg-white border border-gray-200 rounded-lg p-6">
                <h4 className="text-lg font-semibold text-[#001011] mb-4 absans">‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä (Additional Information)</h4>
                <div className="space-y-3 text-sm text-[#001011]">
                  <div><strong>‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡•ß (Additional Information 1):</strong> {getCurrentFormData().additionalInfo || 'N/A'}</div>
                  <div><strong>‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡•® (Additional Information 2):</strong> {getCurrentFormData().additionalInfo2 || 'N/A'}</div>
                  <div><strong>‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡•© (Additional Information 3):</strong> {getCurrentFormData().additionalInfo3 || 'N/A'}</div>
                </div>
              </div>

              {/* Step 7: Terms & Agreement */}
              <div className="bg-white border border-gray-200 rounded-lg p-6">
                <h4 className="text-lg font-semibold text-[#001011] mb-4 absans">‡§®‡§ø‡§Ø‡§Æ ‡§∞ ‡§∏‡§π‡§Æ‡§§‡§ø (Terms & Agreement)</h4>
                <div className="space-y-3 text-sm text-[#001011]">
                  <div><strong>‡§∏‡§π‡§Æ‡§§‡§ø ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ (Agreement Accepted):</strong> {getCurrentFormData().agreementAccepted ? '‚úÖ Yes' : '‚ùå No'}</div>
                  <div><strong>‡§µ‡§ø‡§§‡§∞‡§ï‡§ï‡•ã ‡§®‡§æ‡§Æ (Distributor Name):</strong> {getCurrentFormData().distributorSignatureName || 'N/A'}</div>
                  <div><strong>‡§Æ‡§ø‡§§‡§ø (Date):</strong> {getCurrentFormData().distributorSignatureDate || 'N/A'}</div>
                </div>
              </div>
            </div>
          </div>
        );

      default:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-[#001011] mb-6 absans">
              Step {currentStep} - Under Development
            </h3>
            <p className="text-[#001011] absans">
              This step content will be implemented soon. For now, you can navigate to the next step.
            </p>
          </div>
        );
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 absans">
      <Toaster 
        position="top-right"
        toastOptions={{
          duration: 4000,
          style: {
            background: '#fff',
            color: '#374151',
            border: '1px solid #e5e7eb',
            borderRadius: '8px',
            boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
          },
        }}
      />
      
      {/* Thank You Message */}
      {isSubmitted && (
        <div className="min-h-screen flex items-center justify-center bg-gray-50">
          <div className="max-w-2xl mx-auto text-center px-6">
            <div className="bg-white rounded-xl shadow-lg p-8 border border-gray-200">
              <div className="mb-6">
                <div className="w-20 h-20 mx-auto bg-green-100 rounded-full flex items-center justify-center mb-4">
                  <svg className="w-10 h-10 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                </div>
                <h1 className="text-3xl font-bold text-[#001011] mb-4 absans">
                  ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! (Thank You!)
                </h1>
                <h2 className="text-xl font-semibold text-[#001011] mb-4 absans">
                  ‡§Ü‡§µ‡•á‡§¶‡§® ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§™‡•á‡§∂ ‡§ó‡§∞‡§ø‡§Ø‡•ã
                </h2>
              </div>
              
              <div className="space-y-4 text-[#001011] absans">
                <p className="text-lg">
                  ‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§Ü‡§µ‡•á‡§¶‡§® ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§™‡•á‡§∂ ‡§ó‡§∞‡§ø‡§Ø‡•ã‡•§ ‡§π‡§æ‡§Æ‡•ç‡§∞‡•ã ‡§ü‡•ã‡§≤‡•Ä‡§≤‡•á ‡§Ø‡§∏‡§ï‡•ã ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ó‡§∞‡•ç‡§®‡•á‡§õ ‡§∞ ‡§§‡§™‡§æ‡§à‡§Ç‡§≤‡§æ‡§à ‡§´‡§ø‡§∞‡•ç‡§§‡§æ ‡§∏‡§Æ‡•ç‡§™‡§∞‡•ç‡§ï ‡§ó‡§∞‡•ç‡§®‡•á‡§õ‡•§
                </p>
                <p className="text-base text-gray-600">
                  Your application has been successfully submitted. Our team will review it and get back to you.
                </p>
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mt-6">
                  <p className="text-sm text-blue-800 absans">
                    <strong>‡§Ö‡§ó‡§æ‡§°‡§ø ‡§ï‡•á ‡§π‡•Å‡§®‡•ç‡§õ?</strong> ‡§π‡§æ‡§Æ‡•Ä ‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§Ü‡§µ‡•á‡§¶‡§®‡§ï‡•ã ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ó‡§∞‡•ç‡§®‡•á‡§õ‡•å‡§Ç ‡§∞ ‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡§ø‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§´‡§ø‡§∞‡•ç‡§§‡§æ ‡§∏‡§Æ‡•ç‡§™‡§∞‡•ç‡§ï ‡§ó‡§∞‡•ç‡§®‡•á‡§õ‡•å‡§Ç‡•§
                  </p>
                  <p className="text-xs text-blue-700 mt-2">
                    <strong>What's next?</strong> We will review your application and contact you back based on your business status.
                  </p>
                </div>
              </div>
              
              <div className="mt-8 pt-6 border-t border-gray-200">
                <button
                  onClick={() => {
                    setIsSubmitted(false);
                    setCurrentStep(1);
                    // Reset form if needed
                    window.location.reload();
                  }}
                  className="px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white rounded-lg text-sm font-medium transition-colors absans"
                >
                  ‡§®‡§Ø‡§æ‡§Å ‡§Ü‡§µ‡•á‡§¶‡§® (New Application)
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Main Form Content - only show when not submitted */}
      {!isSubmitted && (
        <>
          {/* Header */}
      <div 
        className="sticky top-0 z-50 border-b border-gray-200"
        style={{
          background: "radial-gradient(125% 125% at 50% 90%, #fff 40%,rgb(228, 106, 40) 100%)",
        }}
      >
        <div className="max-w-9xl px-4 py-6 ">
          <div className="flex flex-col sm:flex-row items-center justify-center relative">
            {/* Logo */}
            <div className="flex-shrink-0 mb-2 sm:mb-0 sm:absolute sm:left-0">
              <Image src="/logo.png" alt="ZIP ZIP" width={150} height={150} className="w-24 h-16 sm:w-20 sm:h-12 md:w-22 md:h-14 lg:w-28 lg:h-18" />
            </div>
            {/* Title centered */}
            <div className="text-center">
              <h1 className="text-lg md:text-2xl font-extrabold text-[#001011] absans">
                ‡§µ‡§ø‡§§‡§∞‡§ï ‡§Ü‡§µ‡•á‡§¶‡§® ‡§´‡§æ‡§∞‡§Æ<br />Distributor Application Form
              </h1>
            </div>
          </div>
        </div>
      </div>

      <div className="w-full px-4 py-8" style={{
        backgroundImage: `linear-gradient(135deg, #F2F8FC 0%, #E0F2FE 25%, #F2F8FC 50%, #E0F2FE 75%, #F2F8FC 100%)`,
        backgroundSize: '200% 200%',
        animation: 'marble 8s ease-in-out infinite'
      }}>
        <div className="lg:flex lg:gap-8">
          {/* Progress Sidebar - Hidden on small screens */}
          <div className="hidden lg:block lg:w-96 mb-8 lg:mb-0">
            <div className="bg-white rounded-lg shadow-sm p-6 fixed top-24 left-8 z-10 max-h-[calc(100vh-8rem)] overflow-y-auto">
              <h2 className="text-lg font-semibold text-[#001011] mb-6 absans">‡§™‡•ç‡§∞‡§ó‡§§‡§ø</h2>
              
              {/* Progress Overview */}
              <div className="mb-6">
                <div className="flex justify-between text-sm text-[#001011] mb-2">
                  <span>Step {currentStep} of {steps.length}</span>
                  <span>{Math.round((currentStep / steps.length) * 100)}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-gradient-to-r from-blue-500 to-green-500 h-2 rounded-full transition-all duration-500 ease-out"
                    style={{ width: `${(currentStep / steps.length) * 100}%` }}
                  ></div>
                </div>
              </div>

              {/* Step Tabs */}
              <div className="space-y-12">
                {steps.map((step, index) => (
                  <div key={step.id} className="relative">
                    {/* Connecting Line */}
                    {index < steps.length - 1 && (
                      <div className="absolute left-3 top-10 w-0.5 h-12 bg-gray-300 z-0"></div>
                    )}
                    
                    <div
                      className={`relative p-4 rounded-lg border transition-all duration-200 cursor-pointer z-10 ${
                        currentStep === step.id
                        ? 'bg-blue-50 border-blue-200 shadow-sm'
                          : currentStep > step.id
                        ? 'bg-green-50 border-green-200'
                        : 'bg-gray-50 border-gray-200 hover:bg-gray-100'
                    }`}
                    onClick={() => {
                      if (currentStep > step.id) {
                        setCurrentStep(step.id);
                      }
                    }}
                  >
                      <div className="flex items-center space-x-4">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                        currentStep === step.id
                          ? 'bg-blue-500 text-white'
                          : currentStep > step.id
                          ? 'bg-green-500 text-white'
                            : 'bg-gray-300 text-[#001011]'
                      }`}>
                          {currentStep > step.id ? (
                            <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                            </svg>
                          ) : (
                            step.id
                          )}
                    </div>
                      <div className="flex-1 min-w-0">
                        <p className={`text-sm font-medium ${
                            currentStep === step.id ? 'text-blue-700' : currentStep > step.id ? 'text-green-700' : 'text-[#001011]'
                        }`}>
                        {step.title}
                        </p>
                          <p className="text-xs text-[#001011] mt-1">
                        {step.subtitle}
                        </p>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Mobile Progress - Modern Tab Design */}
          <div className="lg:hidden mb-6">
            <div className="bg-white rounded-lg shadow-sm p-4">
              {/* Progress Overview */}
              <div className="mb-4">
                <div className="flex justify-between text-sm text-[#001011] mb-2">
                  <span>Step {currentStep} of {steps.length}</span>
                  <span>{Math.round((currentStep / steps.length) * 100)}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-gradient-to-r from-blue-500 to-green-500 h-2 rounded-full transition-all duration-500 ease-out"
                    style={{ width: `${(currentStep / steps.length) * 100}%` }}
                  ></div>
                </div>
              </div>

              {/* Step Indicators */}
              <div className="flex justify-evenly gap-12 overflow-x-auto relative">
                {steps.map((step, index) => (
                  <div key={step.id} className="flex flex-col items-center relative">
                    {/* Connecting Line */}
                    {index < steps.length - 1 && (
                      <div className="absolute left-1/2 top-4 w-12 h-0.5 bg-gray-300 z-0 transform translate-x-4"></div>
                    )}
                    
                      <div
                      className={`relative w-8 h-8 rounded-full flex items-center justify-center text-xs font-medium transition-all duration-300 z-10 ${
                          currentStep === step.id
                          ? 'bg-blue-500 text-white shadow-lg'
                            : currentStep > step.id
                          ? 'bg-green-500 text-white shadow-lg'
                            : 'bg-gray-200 text-[#001011]'
                        }`}
                      >
                        {currentStep > step.id ? (
                        <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                          </svg>
                        ) : (
                          step.id
                        )}
                      </div>
                    <p className={`text-xs mt-1 text-center ${
                          currentStep === step.id
                        ? 'text-blue-600 font-medium'
                            : currentStep > step.id
                            ? 'text-green-600'
                            : 'text-[#001011]'
                    }`}>
                        {step.title}
                    </p>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="flex-1">
            <div className="bg-white rounded-lg shadow-sm">
              {/* Step Navigation */}
              <div className="flex justify-between items-center p-6 border-b border-gray-200">
                <div>
                  <h2 className="text-lg font-semibold text-[#001011] absans">
                    Step {currentStep} of {steps.length}
                  </h2>
                  <p className="text-sm text-[#001011] absans">
                    {steps.find(s => s.id === currentStep)?.title}
                  </p>
                </div>
              </div>


              {/* Form Content */}
              <div className="p-4">
                <form onSubmit={(e) => e.preventDefault()} className="space-y-6">
                  {renderStepContent()}
                  
                  {/* Navigation Buttons */}
                  <div className="flex justify-between pt-6 border-t border-gray-200">
                    <button
                      type="button"
                      onClick={prevStep}
                      disabled={currentStep === 1}
                      className={`px-6 py-3 rounded-lg text-sm font-medium transition-colors absans ${
                        currentStep === 1
                          ? 'bg-gray-100 text-[#001011] cursor-not-allowed'
                          : 'bg-gray-200 text-[#001011] hover:bg-gray-300'
                      }`}
                    >
                      ‡§™‡§õ‡§æ‡§°‡§ø
                    </button>

                    {currentStep < steps.length ? (
                      <button
                        type="button"
                        onClick={nextStep}
                        className="px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white rounded-lg text-sm font-medium transition-colors absans"
                      >
                        ‡§Ö‡§ó‡§æ‡§°‡§ø
                      </button>
                    ) : (
                      <button
                        type="submit"
                        disabled={isSubmitting}
                        onClick={async (e) => {
                          console.log('üñ±Ô∏è Submit button clicked!');
                          console.log('Current step:', currentStep);
                          console.log('Form errors:', errors);
                          const currentValues = watch();
                          console.log('Current form values:', currentValues);
                          
                          // Check if agreement is accepted
                          if (currentStep === 8 && !currentValues.agreementAccepted) {
                            toast.error('‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§∞‡•ç‡§§‡§π‡§∞‡•Ç ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç (Please accept the terms and conditions)', {
                              duration: 4000,
                              style: {
                                background: '#fee2e2',
                                color: '#dc2626',
                                border: '1px solid #fecaca',
                              },
                            });
                            return;
                          }
                          
                          
                          // If on final step and agreement is accepted, submit directly
                          if (currentStep === 8 && currentValues.agreementAccepted) {
                            e.preventDefault();
                            console.log('üöÄ Submitting form from submit button');
                            await onSubmit(currentValues);
                          }
                        }}
                        className={`px-6 py-3 rounded-lg text-sm font-medium transition-colors absans ${
                          isSubmitting
                            ? 'bg-gray-400 text-white cursor-not-allowed'
                            : 'bg-green-500 hover:bg-green-600 text-white'
                        }`}
                      >
                        {isSubmitting ? '‡§™‡•á‡§∂ ‡§ó‡§∞‡•ç‡§¶‡•à...' : '‡§™‡•á‡§∂ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç'}
                      </button>
                    )}
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
        </>
      )}
    </div>
  );
}

// Main exported component with Context Provider
export default function DistributorForm() {
  return (
    <>
      <style jsx>{`
        @keyframes marble {
          0% { background-position: 0% 50%; }
          50% { background-position: 100% 50%; }
          100% { background-position: 0% 50%; }
        }
      `}</style>

      {/* Main Content */}
      <div className="min-h-screen bg-gray-50">
        <FormDataProvider>
          <DistributorFormContent />
        </FormDataProvider>
      </div>
    </>
  );
}
